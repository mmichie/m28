# Test file for isinstance and issubclass functions

# Test isinstance with primitive types
(print "Testing isinstance with primitive types:")
(print "isinstance(42, int): " (isinstance 42 int))
(print "isinstance(3.14, float): " (isinstance 3.14 float))
(print "isinstance(3.0, int): " (isinstance 3.0 int))
(print "isinstance(\"hello\", str): " (isinstance "hello" str))

# Just test dict and bool
(= my_dict {"a": 1})
(print "isinstance(my_dict, dict): " (isinstance my_dict dict))
(print "isinstance(True, bool): " (isinstance True bool))
(print "isinstance(None, none): " (isinstance None none))

# Define some classes for testing
(class SimpleClass ()
  (def (init self)
    (= self.value "simple")))

(class ChildClass (SimpleClass)
  (def (init self)
    (super.init self)
    (= self.child_value "child")))

# Create some instances
(= obj1 (SimpleClass))
(= obj2 (ChildClass))

# Test isinstance with custom classes
(print "\nTesting isinstance with custom classes:")
(print "isinstance(obj1, SimpleClass): " (isinstance obj1 SimpleClass))
(print "isinstance(obj2, SimpleClass): " (isinstance obj2 SimpleClass))
(print "isinstance(obj2, ChildClass): " (isinstance obj2 ChildClass))
(print "isinstance(obj1, ChildClass): " (isinstance obj1 ChildClass))

# Test issubclass
(print "\nTesting issubclass:")
(print "issubclass(ChildClass, SimpleClass): " (issubclass ChildClass SimpleClass))
(print "issubclass(SimpleClass, ChildClass): " (issubclass SimpleClass ChildClass))
(print "issubclass(SimpleClass, SimpleClass): " (issubclass SimpleClass SimpleClass))

(print "\nAll tests completed.")