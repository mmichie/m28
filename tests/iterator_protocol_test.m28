# Test Iterator Protocol Implementation

# Test 1: iter() with built-in types
(print "Testing iter() with built-in types:")

# List iterator
(= lst [1, 2, 3])
(= lst_iter (iter lst))
(print "List iterator:" lst_iter)

# String iterator  
(= str_iter (iter "abc"))
(print "String iterator:" str_iter)

# Dict iterator (iterates over keys)
(= dict_iter (iter {"a": 1, "b": 2}))
(print "Dict iterator:" dict_iter)

# Tuple iterator
(= tuple_iter (iter (1, 2, 3)))
(print "Tuple iterator:" tuple_iter)

# Test 2: next() function with built-in iterators
(print "\nTesting next() with built-in iterators:")

(= lst [10, 20, 30])
(= it (iter lst))
(print "First:" (next it))
(print "Second:" (next it))
(print "Third:" (next it))
# This should raise StopIteration
(try
  (print "Fourth:" (next it))
  (except Exception e
    (print "Got expected error:" e)))

# Test 3: next() with default value
(print "\nTesting next() with default value:")
(= it2 (iter [1, 2]))
(print (next it2))      # 1
(print (next it2))      # 2
(print (next it2 "DONE"))  # "DONE" (default)
(print (next it2 42))      # 42 (default)

# Test 4: for loop with iterator protocol
(print "\nTesting for loop with custom iterator:")

# Define a custom counter class with __iter__ and __next__
(class Counter
  (def __init__ (self max)
    (= self.max max)
    (= self.count 0)
    self)
  
  (def __iter__ (self)
    self)  # Return self as iterator
  
  (def __next__ (self)
    (if (< self.count self.max)
      (do
        (= self.count (+ self.count 1))
        self.count)
      (raise (Exception "StopIteration")))))

# Test the custom iterator in a for loop
(print "\nCounting from 1 to 5:")
(for n (Counter 5)
  (print "Count:" n))

# Test 5: Custom iterable class (returns separate iterator)
(print "\nTesting custom iterable with separate iterator:")

(class RangeIterator
  (def __init__ (self start stop)
    (= self.current start)
    (= self.stop stop)
    self)
  
  (def __next__ (self)
    (if (< self.current self.stop)
      (do
        (= val self.current)
        (= self.current (+ self.current 1))
        val)
      (raise (Exception "StopIteration")))))

(class Range
  (def __init__ (self start stop)
    (= self.start start)
    (= self.stop stop)
    self)
  
  (def __iter__ (self)
    (RangeIterator self.start self.stop)))

# Test the custom range
(print "\nCustom range from 10 to 15:")
(for i (Range 10 15)
  (print i))

# Test 6: Multiple iteration on same iterable
(print "\nTesting multiple iterations:")
(= nums [1, 2, 3])
(print "First iteration:")
(for n nums
  (print n))
(print "Second iteration:")
(for n nums
  (print n))

# Test 7: Nested iterations
(print "\nTesting nested iterations:")
(for i [1, 2]
  (for j ["a", "b"]
    (print i j)))

# Test 8: Dictionary iteration
(print "\nTesting dictionary iteration (keys):")
(= d {"x": 10, "y": 20, "z": 30})
(for k d
  (print "Key:" k "Value:" d[k]))

# Test 9: String iteration  
(print "\nTesting string iteration:")
(for char "Hello"
  (print "Char:" char))

# Test 10: iter() on already-iterator
(print "\nTesting iter() on iterator:")
(= lst [1, 2, 3])
(= it1 (iter lst))
(= it2 (iter it1))  # Should return the same iterator
(print "First from it2:" (next it2))
(print "Second from it1:" (next it1))  # Should continue from where it2 left off

(print "\nAll iterator protocol tests completed!")