# generator-test-comprehensive.m28
#
# Comprehensive test for generators in M28
# Testing various aspects of generators as per the language specification

(print "===== Generator Tests =====\n")

# -- Basic Generator Function --

(print "-- Basic Generator Function --")

# Define a simple generator that yields values from 0 to n-1
(def (count-up-to n)
  (= i 0)
  (while (< i n)
    (yield i)
    (= i (+ i 1))))

# Test basic generator usage
(print "\nTesting basic generator:")
(= gen (count-up-to 5))
(print "Type of generator:" (type gen))

# Collect values from generator
(= values (list))
(for value gen
  (append values value))
(print "Generated values:" values)
(assert (== values (list 0 1 2 3 4)) "Generator should yield values 0 through 4")

# Test that generator is exhausted after iteration
(= more-values (list))
(for value gen
  (append more-values value))
(print "Values after exhaustion:" more-values)
(assert (== more-values (list)) "Generator should be exhausted after first iteration")

# -- Generator State Preservation --

(print "\n-- Generator State Preservation --")

# Define a generator that demonstrates state preservation
(def (stateful-generator)
  (= count 0)
  (yield count)
  (= count (+ count 1))
  (yield count)
  (= count (+ count 1))
  (yield count))

# Test state preservation in generator
(print "\nTesting state preservation:")
(= state-gen (stateful-generator))
(= state-values (list))
(for value state-gen
  (append state-values value))
(print "Generated values with state:" state-values)
(assert (== state-values (list 0 1 2)) "Generator should preserve state between yields")

# -- Recursive Generator --

(print "\n-- Recursive Generator --")

# Define a recursive generator that yields Fibonacci numbers
(def (fibonacci-gen n)
  (= a 0)
  (= b 1)
  (= count 0)
  (while (< count n)
    (yield a)
    (= temp (+ a b))
    (= a b)
    (= b temp)
    (= count (+ count 1))))

# Test recursive generator
(print "\nTesting Fibonacci generator:")
(= fib-values (list))
(for value (fibonacci-gen 7)
  (append fib-values value))
(print "First 7 Fibonacci numbers:" fib-values)
(assert (== fib-values (list 0 1 1 2 3 5 8)) "Should generate correct Fibonacci sequence")

# -- Generator with Exception Handling --

(print "\n-- Generator with Exception Handling --")

# Define a generator that handles exceptions
(def (exception-generator)
  (try
    (yield 1)
    (yield 2)
    (yield (/ 1 0))  # This will cause an exception
    (yield 3)  # This should not be reached
    (except ZeroDivisionError
      (yield "Error caught")
      (yield 4))))

# Test generator with exception
(print "\nTesting generator with exception handling:")
(= exception-gen (exception-generator))
(= exception-values (list))
(try
  (for value exception-gen
    (append exception-values value))
  (except Exception as e
    (print "Exception escaped generator:" e)))
(print "Values from exception generator:" exception-values)

# -- Nested Generators --

(print "\n-- Nested Generators --")

# Define a generator that uses another generator
(def (nested-generator n)
  (for i (count-up-to n)
    (yield (* i i))))

# Test nested generator
(print "\nTesting nested generator:")
(= nested-values (list))
(for value (nested-generator 5)
  (append nested-values value))
(print "Squared values from nested generator:" nested-values)
(assert (== nested-values (list 0 1 4 9 16)) "Nested generator should yield squared values")

# -- Generator with Parameters --

(print "\n-- Generator with Parameters --")

# Define a generator that takes and uses parameters
(def (sequence-generator start step count)
  (= value start)
  (= i 0)
  (while (< i count)
    (yield value)
    (= value (+ value step))
    (= i (+ i 1))))

# Test generator with parameters
(print "\nTesting generator with parameters:")
(= seq-values (list))
(for value (sequence-generator 10 5 4)
  (append seq-values value))
(print "Sequence values:" seq-values)
(assert (== seq-values (list 10 15 20 25)) "Generator should use parameters correctly")

# -- Generator Methods (if supported) --

(print "\n-- Generator Methods --")

# Define a generator that might support send/throw/close
(def (echo-generator)
  (= received (yield "Ready"))
  (while True
    (try
      (= received (yield received))
      (except Exception as e
        (yield (+ "Error: " (str e)))
        (break)))))

# Test generator methods if supported
(print "\nTesting generator methods (if supported):")
(try
  (= echo-gen (echo-generator))
  (= first (echo-gen.__next__))  # Start the generator
  (print "First yield:" first)
  (assert (== first "Ready") "First yield should be 'Ready'")
  
  # Test send method if supported
  (try
    (= response (echo-gen.send "Hello"))
    (print "Response to 'Hello':" response)
    (assert (== response "Hello") "Echo generator should return sent value")
    
    # Test throw method if supported
    (try
      (= error-response (echo-gen.throw (ValueError "Test error")))
      (print "Response to thrown error:" error-response)
      
      # Test close method if supported
      (try
        (echo-gen.close)
        (print "Generator closed successfully")
        (except Exception as e
          (print "Close method not supported:" e)))
      
      (except Exception as e
        (print "Throw method not supported:" e)))
    
    (except Exception as e
      (print "Send method not supported:" e)))
  
  (except Exception as e
    (print "Advanced generator methods not supported:" e)))

# -- Generator Expressions (if supported) --

(print "\n-- Generator Expressions --")

# Test generator expressions if supported
(try
  (= squares-gen (for (x (range 5)) (* x x)))
  (= squares-list (list))
  (for square squares-gen
    (append squares-list square))
  (print "Squares from generator expression:" squares-list)
  (assert (== squares-list (list 0 1 4 9 16)) "Generator expression should work")
  (except Exception as e
    (print "Generator expressions not supported:" e)))

# -- Conclusion --

(print "\n===== Generator Tests Complete =====")