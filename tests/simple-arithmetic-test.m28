;; Simple Arithmetic Test

;; Test utilities
(def (assert condition message)
  (if (not condition)
      (begin
        (print (+ "FAIL: " message))
        False)
      True))

(def (run-test test-name test-fn)
  (print (+ "Running test: " test-name))
  (def result (test-fn))
  (if result
      (print (+ "PASS: " test-name))
      (print (+ "FAIL: " test-name)))
  result)

;; Addition Tests
(def (test-addition)
  (and
    (assert (== (+ 1 2) 3) "Basic addition failed")
    (assert (== (+ -1 1) 0) "Addition with negative numbers failed")
    (assert (== (+ 2.5 3.5) 6.0) "Addition with floating point numbers failed")
    (assert (== (+ 1 2 3 4 5) 15) "Multi-argument addition failed")))

;; Subtraction Tests
(def (test-subtraction)
  (and
    (assert (== (- 5 3) 2) "Basic subtraction failed")
    (assert (== (- 5 -3) 8) "Subtraction with negative numbers failed")))

;; Multiplication Tests
(def (test-multiplication)
  (and
    (assert (== (* 2 3) 6) "Basic multiplication failed")
    (assert (== (* -2 3) -6) "Multiplication with negative numbers failed")
    (assert (== (* 0 100) 0) "Multiplication by zero failed")
    (assert (== (* 2 3 4) 24) "Multi-argument multiplication failed")))

;; Division Tests
(def (test-division)
  (and
    (assert (== (/ 6 2) 3) "Basic division failed")
    (assert (== (/ 6 -2) -3) "Division with negative numbers failed")
    (assert (== (/ 5 2) 2.5) "Division resulting in floating point failed")))

;; Run the tests
(print "\n===== Arithmetic Tests =====")

(def passed 0)
(def total 4)

(if (run-test "Addition" test-addition)
    (def passed (+ passed 1)))

(if (run-test "Subtraction" test-subtraction)
    (def passed (+ passed 1)))

(if (run-test "Multiplication" test-multiplication)
    (def passed (+ passed 1)))

(if (run-test "Division" test-division)
    (def passed (+ passed 1)))

(print (+ "\nResults: " (str passed) "/" (str total) " tests passed"))