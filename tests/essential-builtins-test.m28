# Test essential built-in functions

# Test all()
(print "Testing all():")
(assert (== (all [true , true , true]) true) "all() with all true failed")
(assert (== (all [true , false , true]) false) "all() with one false failed")
(assert (== (all []) true) "all() with empty list failed")
(assert (== (all [1 , 2 , 3]) true) "all() with truthy values failed")
(assert (== (all [1 , 0 , 3]) false) "all() with zero failed")

# Test any()
(print "Testing any():")
(assert (== (any [false , false , false]) false) "any() with all false failed")
(assert (== (any [false , true , false]) true) "any() with one true failed")
(assert (== (any []) false) "any() with empty list failed")
(assert (== (any [0 , 0 , 1]) true) "any() with one truthy failed")
(assert (== (any [0 , 0 , 0]) false) "any() with all falsy failed")

# Test round()
(print "Testing round():")
(assert (== (round 3.7) 4) "round(3.7) failed")
(assert (== (round 3.2) 3) "round(3.2) failed")
(assert (== (round -2.8) -3) "round(-2.8) failed")
(assert (== (round 3.14159 2) 3.14) "round(3.14159, 2) failed")
(assert (== (round 1234.5678 -2) 1200) "round with negative precision failed")

# Test divmod()
(print "Testing divmod():")
(= dm1 (divmod 17 5))
(assert (== (get-item dm1 0) 3) "divmod(17, 5) quotient failed")
(assert (== (get-item dm1 1) 2) "divmod(17, 5) remainder failed")

(= dm2 (divmod -17 5))
(assert (== (get-item dm2 0) -4) "divmod(-17, 5) quotient failed")
(assert (== (get-item dm2 1) 3) "divmod(-17, 5) remainder failed")

# Test hasattr()
(print "Testing hasattr():")
(= s "hello")
(assert (hasattr s "upper") "hasattr() for string method failed")
(assert (not (hasattr s "nonexistent")) "hasattr() for missing attr failed")
(assert (hasattr [1 , 2 , 3] "append") "hasattr() for list method failed")

# Test getattr()
(print "Testing getattr():")
(= upper_method (getattr s "upper"))
(assert (callable upper_method) "getattr() should return callable method")
(assert (== (getattr s "nonexistent" "default") "default") "getattr() with default failed")

# Test callable()
(print "Testing callable():")
(assert (callable print) "callable(print) failed")
(assert (callable len) "callable(len) failed")
(assert (not (callable 42)) "callable(42) should be false")
(assert (not (callable "hello")) "callable('hello') should be false")
(def test_func () "test")
(assert (callable test_func) "callable(user_function) failed")

(print "All essential builtin tests passed!")