(import test-utils)

(def (test-basic-assignment)
  (def x 10)
  (def y 20)
  (def z (+ x y))
  
  (and
    (assert (== x 10) "Basic integer assignment failed")
    (assert (== y 20) "Second variable assignment failed")
    (assert (== z 30) "Variable assignment with expression failed")))

(def (test-reassignment)
  (def x 10)
  (def x 20)  ; Reassign x
  
  (and
    (assert (== x 20) "Variable reassignment failed")))

(def (test-multiple-assignments)
  (def a 1)
  (def b 2)
  (def c 3)
  
  (and
    (assert (== a 1) "First assignment in multiple assignments failed")
    (assert (== b 2) "Second assignment in multiple assignments failed")
    (assert (== c 3) "Third assignment in multiple assignments failed")))

(def (test-different-types)
  (def a 10)
  (def b 3.14)
  (def c "hello")
  (def d True)
  (def e None)
  (def f (list 1 2 3))
  
  (and
    (assert (== a 10) "Integer assignment failed")
    (assert (approx-eq b 3.14 0.0001 "Float assignment failed"))
    (assert (== c "hello") "String assignment failed")
    (assert (== d True) "Boolean assignment failed")
    (assert (== e None) "None assignment failed")
    (assert (== f (list 1 2 3)) "List assignment failed")))

(def (test-local-scope)
  (def x 10)  ; Global scope
  
  (def (test-function)
    (def x 20)  ; Local scope
    x)
  
  (and
    (assert (== (test-function) 20) "Local variable in function failed")
    (assert (== x 10) "Global variable unchanged failed")))

(def (test-nested-scope)
  (def x 10)
  
  (def (outer)
    (def y 20)
    (def (inner)
      (def z 30)
      (+ x y z))
    (inner))
  
  (and
    (assert (== (outer) 60) "Nested scope access failed")))

(def (test-closure-scope)
  (def (make-counter)
    (def count 0)
    (lambda ()
      (def count (+ count 1))
      count))
  
  (def counter (make-counter))
  
  (and
    (assert (== (counter) 1) "First closure call failed")
    (assert (== (counter) 2) "Second closure call failed")
    (assert (== (counter) 3) "Third closure call failed")))

(def (test-shadowing)
  (def x 10)
  
  (def (test-shadow)
    (def x 20)
    (+ x 5))
  
  (and
    (assert (== (test-shadow) 25) "Variable shadowing in function failed")
    (assert (== x 10) "Original variable after shadowing failed")))

(def variable-tests 
  (list 
    (list "Basic Assignment" test-basic-assignment)
    (list "Reassignment" test-reassignment)
    (list "Multiple Assignments" test-multiple-assignments)
    (list "Different Types" test-different-types)
    (list "Local Scope" test-local-scope)
    (list "Nested Scope" test-nested-scope)
    (list "Closure Scope" test-closure-scope)
    (list "Shadowing" test-shadowing)))

(def (run-variable-tests)
  (test-suite "Variable Assignment and Scope Tests" variable-tests))

(run-variable-tests)