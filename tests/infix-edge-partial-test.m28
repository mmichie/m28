# Test edge cases for infix operator support - partial

(print "Testing infix edge cases...")

# Test 1: Mixed prefix and infix - infix result used in prefix context
(print (2 + 3))
(print "Mixed prefix/infix works")

# Test 2: Assignment with infix RHS
(= x (5 + 3))
(assert (== x 8) "Assignment with infix RHS")
(print "Test 2 passed")

(= y (x * 2 + 1))
(assert (== y 17) "Complex infix RHS: 8 * 2 + 1 = 17")
(print "Test 2b passed")

# Test 3: Nested infix expressions
(= result ((2 + 3) * (4 + 1)))
(assert (== result 25) "Nested infix: (2+3)*(4+1) = 25")
(print "Test 3 passed")

# Test 4: Infix in function arguments
(def add3 (a b c)
  (+ a b c))

(= result (add3 (1 + 2) (3 * 2) (10 - 5)))
(assert (== result 14) "Infix in function args: 3 + 6 + 5 = 14")
(print "Test 4 passed")

# Test 5: Comparison chains (each comparison is separate in M28)
(= x 5)
(= y 10)
(= z 15)
(assert (and (< x y) (< y z)) "Chained comparison simulation")
(print "Test 5 passed")

# Test 6: Boolean logic with infix
(= a 10)
(= b 20)
(assert (and (> a 5) (< b 30)) "Boolean and with infix comparisons")
(assert (or (< a 5) (> b 15)) "Boolean or with infix comparisons")
(print "Test 6 passed")

# Test 7: Complex precedence
(= result (2 + 3 * 4 - 1))
(assert (== result 13) "Precedence: 2 + (3*4) - 1 = 13")

(= result (10 - 2 * 3))
(assert (== result 4) "Precedence: 10 - (2*3) = 4")
(print "Test 7 passed")

# Test 8: Multiple groupings
(= result (((2 + 3) * 4) - 1))
(assert (== result 19) "Multiple parens: ((2+3)*4)-1 = 19")
(print "Test 8 passed")

# Test 9: Infix in list/tuple literals
(= nums [(1 + 1) (2 * 2) (3 ** 2)])
(assert (== nums[0] 2) "Infix in list literal [0]")
(assert (== nums[1] 4) "Infix in list literal [1]")
(assert (== nums[2] 9) "Infix in list literal [2]")
(print "Test 9a passed")

(= coords (tuple (10 + 5) (20 * 2)))
(assert (== coords[0] 15) "Infix in tuple literal [0]")
(assert (== coords[1] 40) "Infix in tuple literal [1]")
(print "Test 9b passed")

# Test 10: Infix in dict literals
(= d {"sum": (5 + 5), "product": (3 * 4)})
(assert (== d["sum"] 10) "Infix in dict value")
(assert (== d["product"] 12) "Infix in dict value")
(print "Test 10 passed")

# Test 11: Division operators
(= result (10 / 2))
(assert (== result 5.0) "Float division")

(= result (10 // 3))
(assert (== result 3) "Integer division")

(= result (10 % 3))
(assert (== result 1) "Modulo")
(print "Test 11 passed")

# Test 12: Bitwise operators
(= result (5 | 3))
(assert (== result 7) "Bitwise OR: 5|3 = 7")

(= result (5 & 3))
(assert (== result 1) "Bitwise AND: 5&3 = 1")

(= result (5 ^ 3))
(assert (== result 6) "Bitwise XOR: 5^3 = 6")

(= result (2 << 3))
(assert (== result 16) "Left shift: 2<<3 = 16")

(= result (16 >> 2))
(assert (== result 4) "Right shift: 16>>2 = 4")
(print "Test 12 passed")

# Test 13: Comparison operators
(assert (< 5 10) "Less than")
(assert (<= 5 5) "Less than or equal")
(assert (> 10 5) "Greater than")
(assert (>= 5 5) "Greater than or equal")
(assert (== 5 5) "Equal")
(assert (!= 5 6) "Not equal")
(print "Test 13 passed")

# Test 14: String concatenation (if supported)
(= s1 "Hello")
(= s2 "World")
(= greeting (+ s1 s2))
(print "String concat:" greeting)
(print "Test 14 passed")

# Test 15: Infix in conditional
(= x 10)
(if (> x 5)
  (print "x is greater than 5")
  (print "x is not greater than 5"))
(print "Test 15 passed")

(print "First few tests passed!")
