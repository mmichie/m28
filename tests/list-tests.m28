(import test-utils)

(def (test-list-creation)
  (def empty-list (list))
  (def numbers (list 1 2 3 4 5))
  (def mixed (list 1 "two" 3.0 True None))
  
  (and
    (assert (== (len empty-list) 0) "Empty list creation failed")
    (assert (== (len numbers) 5) "Numeric list creation failed")
    (assert (== (len mixed) 5) "Mixed type list creation failed")))

(def (test-list-access)
  (def numbers (list 10 20 30 40 50))
  
  (and
    (assert (== (get numbers 0) 10) "First element access failed")
    (assert (== (get numbers 2) 30) "Middle element access failed")
    (assert (== (get numbers 4) 50) "Last element access failed")))

(def (test-list-modification)
  (def numbers (list 10 20 30))
  (def numbers-with-append (append numbers 40))
  
  (def modified-list (list 10 20 30))
  (def modified-list (set modified-list 1 25))
  
  (and
    (assert (== numbers-with-append (list 10 20 30 40)) "List append failed")
    (assert (== modified-list (list 10 25 30)) "List element modification failed")))

(def (test-list-operations)
  (def list1 (list 1 2 3))
  (def list2 (list 4 5 6))
  (def concatenated (concat list1 list2))
  
  (and
    (assert (== concatenated (list 1 2 3 4 5 6)) "List concatenation failed")))

(def (test-list-slicing)
  (def numbers (list 10 20 30 40 50))
  
  (and
    (assert (== (slice numbers 1 4) (list 20 30 40)) "List slicing with start and end failed")
    (assert (== (slice numbers 2) (list 30 40 50)) "List slicing with start only failed")
    (assert (== (slice numbers 0 5 2) (list 10 30 50)) "List slicing with step failed")))

(def (test-list-iteration)
  (def numbers (list 1 2 3 4 5))
  (def sum 0)
  
  (for num numbers
    (def sum (+ sum num)))
  
  (assert (== sum 15) "List iteration failed"))

(def (test-higher-order-list-functions)
  (def numbers (list 1 2 3 4 5))
  
  (def doubles (map (lambda (x) (* x 2)) numbers))
  (def evens (filter (lambda (x) (== (% x 2) 0)) numbers))
  (def sum (reduce + 0 numbers))
  
  (and
    (assert (== doubles (list 2 4 6 8 10)) "Map function failed")
    (assert (== evens (list 2 4)) "Filter function failed")
    (assert (== sum 15) "Reduce function failed")))

(def (test-list-comprehension)
  ; If the language supports list comprehensions
  (def squares (for-comprehension x (range 5) (* x x)))
  (def even-squares (for-comprehension x (range 10) (* x x) (== (% x 2) 0)))
  
  (and
    (assert (== squares (list 0 1 4 9 16)) "Basic list comprehension failed")
    (assert (== even-squares (list 0 4 16 36 64)) "List comprehension with condition failed")))

(def (test-nested-lists)
  (def matrix (list 
                (list 1 2 3)
                (list 4 5 6)
                (list 7 8 9)))
  
  (and
    (assert (== (get (get matrix 0) 0) 1) "Nested list access failed")
    (assert (== (get (get matrix 1) 1) 5) "Nested list middle element access failed")
    (assert (== (get (get matrix 2) 2) 9) "Nested list last element access failed")))

(def (test-list-equality)
  (def list1 (list 1 2 3))
  (def list2 (list 1 2 3))
  (def list3 (list 3 2 1))
  
  (and
    (assert (== list1 list2) "Equal lists comparison failed")
    (assert (!= list1 list3) "Different lists comparison failed")))

(def list-tests 
  (list 
    (list "List Creation" test-list-creation)
    (list "List Access" test-list-access)
    (list "List Modification" test-list-modification)
    (list "List Operations" test-list-operations)
    (list "List Slicing" test-list-slicing)
    (list "List Iteration" test-list-iteration)
    (list "Higher-Order List Functions" test-higher-order-list-functions)
    (list "List Comprehension" test-list-comprehension)
    (list "Nested Lists" test-nested-lists)
    (list "List Equality" test-list-equality)))

(def (run-list-tests)
  (test-suite "List Manipulation Tests" list-tests))

(run-list-tests)