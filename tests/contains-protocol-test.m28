# Comprehensive test for __contains__ protocol

(print "Testing __contains__ protocol...")

# Test 1: Built-in types (default behavior without __contains__)
(print "\n1. Testing built-in types with 'in' operator:")
(assert (in "h" "hello") "substring in string")
(assert (not (in "x" "hello")) "substring not in string")
(assert (in 2 [1, 2, 3]) "element in list")
(assert (not (in 4 [1, 2, 3])) "element not in list")
(assert (in 2 (tuple [1, 2, 3])) "element in tuple")
(assert (not (in 4 (tuple [1, 2, 3]))) "element not in tuple")
(assert (in "a" {"a": 1, "b": 2}) "key in dict")
(assert (not (in "c" {"a": 1, "b": 2})) "key not in dict")
(assert (in 2 (set [1, 2, 3])) "element in set")
(assert (not (in 4 (set [1, 2, 3]))) "element not in set")
(print "✓ Built-in types passed")

# Test 2: Custom __contains__ method
(print "\n2. Testing custom __contains__ method:")
(class Container ()
  (def __init__ (self items)
    (= self.items items))
  
  (def __contains__ (self item)
    # Custom logic: check if item is in items
    (for x self.items
      (if (== x item)
        (return True)))
    False))

(= c1 (Container [1, 2, 3]))
(= c2 (Container ["a", "b", "c"]))
(assert (in 2 c1) "2 in custom container [1, 2, 3]")
(assert (not (in 4 c1)) "4 not in custom container [1, 2, 3]")
(assert (in "b" c2) "'b' in custom container ['a', 'b', 'c']")
(assert (not (in "d" c2)) "'d' not in custom container ['a', 'b', 'c']")
(print "✓ Custom __contains__ passed")

# Test 3: Range-like container
(print "\n3. Testing range-like container:")
(class Range ()
  (def __init__ (self start stop)
    (= self.start start)
    (= self.stop stop))
  
  (def __contains__ (self item)
    # Check if item is a number in range
    (try
      (and (>= item self.start) (< item self.stop))
      (except Exception as e
        False))))

(= r1 (Range 0 10))
(= r2 (Range -5 5))
(assert (in 5 r1) "5 in Range(0, 10)")
(assert (not (in 10 r1)) "10 not in Range(0, 10)")
(assert (in -3 r2) "-3 in Range(-5, 5)")
(assert (not (in 5 r2)) "5 not in Range(-5, 5)")
(print "✓ Range container passed")

# Test 4: __contains__ returning non-boolean (should fail)
(print "\n4. Testing error cases:")
(class BadContains ()
  (def __contains__ (self item)
    "yes"))  # Returns string instead of boolean

(= bad (BadContains))
(try
  (in "x" bad)
  (assert False "Should have raised error for non-boolean __contains__")
  (except Exception as e
    (assert (in "should return a boolean" (str e)) "correct error for non-boolean return")))
(print "✓ Error cases passed")

# Test 5: Container that always returns True/False
(print "\n5. Testing always True/False containers:")
(class AlwaysContains ()
  (def __contains__ (self item)
    True))

(class NeverContains ()
  (def __contains__ (self item)
    False))

(= always (AlwaysContains))
(= never (NeverContains))
(assert (in "anything" always) "anything in AlwaysContains")
(assert (in 42 always) "42 in AlwaysContains")
(assert (not (in "anything" never)) "nothing in NeverContains")
(assert (not (in 42 never)) "42 not in NeverContains")
(print "✓ Always/Never containers passed")

# Test 6: Custom list with even indices only
(print "\n6. Testing custom list behavior:")
(class EvenIndexList ()
  (def __init__ (self items)
    (= self.items items))
  
  (def __contains__ (self item)
    # Only contains items at even indices
    (= i 0)
    (for x self.items
      (if (and (== (% i 2) 0) (== x item))
        (return True))
      (= i (+ i 1)))
    False))

(= el (EvenIndexList [1, 2, 3, 4, 5]))
(assert (in 1 el) "1 at index 0 (even)")
(assert (not (in 2 el)) "2 at index 1 (odd)")
(assert (in 3 el) "3 at index 2 (even)")
(assert (not (in 4 el)) "4 at index 3 (odd)")
(assert (in 5 el) "5 at index 4 (even)")
(print "✓ Custom list behavior passed")

# Test 7: Empty container
(print "\n7. Testing empty container:")
(class EmptyContainer ()
  (def __contains__ (self item)
    False))

(= empty (EmptyContainer))
(assert (not (in "anything" empty)) "nothing in empty container")
(assert (not (in 0 empty)) "0 not in empty container")
(print "✓ Empty container passed")

(print "\nAll __contains__ protocol tests passed!")