# Test file for M28 select statement

# Test 1: Basic select with default case
(print "Test 1: Basic select with default case")
(= ch (chan))
(= result (select
  [(case :recv ch)
    (print "Received value:" select-value)
    (print "Channel status:" select-ok)
    "Received"]
  [(default)
    (print "Default case executed")
    "Default"]))
(print "Result:" result)
(assert (= result "Default") "Default case should be selected for empty channel")

# Test 2: Select with send and recv
(print "Test 2: Select with send and recv")
(= ch1 (chan 1))  # buffered channel so send doesn't block
(= ch2 (chan))    # unbuffered empty channel

# Send a value to ch1 first
(send ch1 "hello")

# Now select should pick the recv case
(= result (select
  [(case :recv ch1)
    (print "Received value:" select-value)
    (print "Channel status:" select-ok)
    select-value]
  [(case :send [ch2 "world"])
    "Sent world"]
  [(default)
    "Default"]))
(print "Result:" result)
(assert (= result "hello") "Should receive 'hello' from ch1")

# Test 3: Select with timeout
(print "Test 3: Select with timeout")
(= ch (chan))  # empty channel
(= result (select-timeout 100
  [(case :recv ch)
    "Received"]
  [(timeout)
    (print "Timeout case executed")
    "Timeout"]))
(print "Result:" result)
(assert (= result "Timeout") "Timeout case should execute for empty channel")

# Test 4: Select between multiple ready channels
(print "Test 4: Select between multiple ready channels")
(= ch1 (chan 1))
(= ch2 (chan 1))

# Send values to both channels
(send ch1 "from ch1")
(send ch2 "from ch2")

# Now select could pick either one
(= result (select
  [(case :recv ch1)
    (print "Received from ch1:" select-value)
    (str "Ch1: " select-value)]
  [(case :recv ch2)
    (print "Received from ch2:" select-value)
    (str "Ch2: " select-value)]))
(print "Result:" result)

# We can't assert which one was chosen since it's random,
# but we can check that the result starts with either Ch1 or Ch2
(= prefix-ch1 (substr result 0 4))
(= prefix-ch2 (substr result 0 4))
(assert (or (= prefix-ch1 "Ch1:") (= prefix-ch2 "Ch2:"))
        "Should receive from either ch1 or ch2")

# Test 5: Select with send case
(print "Test 5: Select with send case")
(= ch (chan 1))  # buffered channel
(= result (select
  [(case :send [ch "test message"])
    (print "Sent message to channel")
    "Sent"]
  [(default)
    "Default"]))
(print "Result:" result)
(assert (= result "Sent") "Should select send case for buffered channel")

# Verify the message was sent
(= received (recv ch))
(print "Received message:" (nth received 0))
(assert (= (nth received 0) "test message") "Should receive the test message")

(print "All select tests passed!")