# Test dot notation for property access and method calls

# Create a dictionary with properties and methods
(= person (dict "name" "John" "age" 30))
(dict.set person "greet" (lambda (self message) (+ "Hello " (get self "name") ", " message)))

# Test property access with standard syntax
(print "Standard property access:")
(print (get person "name"))
(print "Expected: John")

# Test property access with dot notation
(print "\nDot notation property access:")
(print (. person "name"))
(print "Expected: John")

# Test method call with standard syntax 
(print "\nStandard method call:")
(print ((get person "greet") person "welcome!"))
(print "Expected: Hello John, welcome!")

# Test method call with dot notation
(print "\nDot notation method call:")
(print (. person "greet" "welcome!"))
(print "Expected: Hello John, welcome!")

# Test object-oriented approach with closures
(print "\n--- Object-Oriented Programming with Closures ---")

(def (create-counter initial)
  (= count initial)
  (= self (dict))
  
  (= increment (lambda (self amount)
    (= count (+ count amount))
    count))
  
  (= get-count (lambda (self)
    count))
  
  (dict.set self "increment" increment)
  (dict.set self "get-count" get-count)
  self)

(= counter (create-counter 10))

(print "\nCounter initial value:")
(print (. counter "get-count"))
(print "Expected: 10")

(print "\nIncrement by 5:")
(print (. counter "increment" 5))
(print "Expected: 15")

(print "\nCurrent value:")
(print (. counter "get-count"))
(print "Expected: 15")

# Test floating point numbers (should not be affected by dot notation)
(print "\n--- Numeric Literals ---")
(print "Floating point: 3.14")
(print 3.14)
(print "Expected: 3.14")

(print "\n--- Tests Complete ---")