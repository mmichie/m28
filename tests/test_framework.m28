# M28 Test Framework
# A simple but effective testing framework

# ANSI color codes
(= GREEN "\033[32m")
(= RED "\033[31m")
(= YELLOW "\033[33m")
(= RESET "\033[0m")

# Test state - using lists that we can mutate
(= test-count [0])
(= pass-count [0])
(= fail-count [0])
(= failed-tests [])
(= current-suite [""])

# Test assertion functions
(def assert (condition message)
  (= test-count[0] (+ test-count[0] 1))
  (if condition
    (do
      (= pass-count[0] (+ pass-count[0] 1))
      (print (+ GREEN "âœ“ " RESET message))
      true)
    (do
      (= fail-count[0] (+ fail-count[0] 1))
      (print (+ RED "âœ— " RESET message))
      (= failed-tests[(len failed-tests)] 
        (dict "suite" current-suite[0] "test" message))
      false)))

(def assert-eq (expected actual message)
  (assert (= expected actual)
    (+ message " (expected: " (str expected) ", actual: " (str actual) ")")))

(def assert-neq (expected actual message)
  (assert (not (= expected actual))
    (+ message " (should not equal: " (str expected) ")")))

(def assert-true (value message)
  (assert (= value true) message))

(def assert-false (value message)
  (assert (= value false) message))

(def assert-nil (value message)
  (assert (= value nil) message))

(def assert-not-nil (value message)
  (assert (not (= value nil)) message))

(def assert-type (value expected-type message)
  (assert (= (type value) expected-type)
    (+ message " (expected type: " expected-type ", actual: " (type value) ")")))

(def assert-error (thunk error-type message)
  (= caught false)
  (= error-msg "")
  (try
    (thunk)
    (except Exception e
      (= caught true)
      (= error-msg (str e))))
  (assert caught (+ message " (expected error: " error-type ")")))

(def assert-no-error (thunk message)
  (= success true)
  (= error-msg "")
  (try
    (thunk)
    (except Exception e
      (= success false)
      (= error-msg (str e))))
  (assert success (+ message " (unexpected error: " error-msg ")")))

# Test suite functions
(def test-suite (name tests)
  (print (+ "\n" YELLOW "Test Suite: " name RESET))
  (= current-suite[0] name)
  (= suite-start-count test-count[0])
  (= suite-start-pass pass-count[0])
  (tests)
  (= suite-tests (- test-count[0] suite-start-count))
  (= suite-pass (- pass-count[0] suite-start-pass))
  (print (+ "  Suite Result: " (str suite-pass) "/" (str suite-tests) " passed\n")))

(def run-test (name test-fn)
  (print (+ "  " name ": "))
  (test-fn))

# Test runner
(def run-all-tests ()
  (print (+ YELLOW "\n=== M28 Test Suite ===" RESET))
  # Reset state
  (= test-count[0] 0)
  (= pass-count[0] 0)
  (= fail-count[0] 0)
  (= failed-tests (failed-tests.clear))
  (= current-suite[0] "")
  
  # Run all test modules (will be imported)
  (if (try test-core (except NameError e false))
    (test-core))
  (if (try test-builtins (except NameError e false))
    (test-builtins))
  (if (try test-special-forms (except NameError e false))
    (test-special-forms))
  (if (try test-advanced (except NameError e false))
    (test-advanced))
  
  # Print summary
  (print (+ "\n" YELLOW "=== Test Summary ===" RESET))
  (print (+ "Total Tests: " (str test-count[0])))
  (print (+ GREEN "Passed: " (str pass-count[0]) RESET))
  (print (+ RED "Failed: " (str fail-count[0]) RESET))
  
  (if (= fail-count[0] 0)
    (print (+ "\n" GREEN "All tests passed! ðŸŽ‰" RESET))
    (do
      (print (+ "\n" RED "Some tests failed:" RESET))
      (for result in failed-tests
        (print (+ "  - " (get result "suite") ": " (get result "test"))))))
  
  # Return success/failure
  (= fail-count[0] 0))

# Export test framework using __exports__ convention
(= __exports__ (list 
  "assert"
  "assert-eq"
  "assert-neq"
  "assert-true"
  "assert-false"
  "assert-nil"
  "assert-not-nil"
  "assert-type"
  "assert-error"
  "assert-no-error"
  "test-suite"
  "run-test"
  "run-all-tests"))