# context-manager-test-comprehensive.m28
#
# Comprehensive test for context managers in M28
# Testing various aspects of context managers as per the language specification

(print "===== Context Manager Tests =====\n")

# -- Basic Context Manager Protocol --

(print "-- Basic Context Manager Protocol --")

# Define a simple context manager class
(class SimpleContext ()
  (def (init self name)
    (= self.name name)
    (= self.entered False)
    (= self.exited False))
  
  (def (__enter__ self)
    (= self.entered True)
    (print "\nEntering context:" self.name)
    self)  # Return self as the context variable
  
  (def (__exit__ self exc_type exc_val exc_tb)
    (= self.exited True)
    (print "Exiting context:" self.name)
    (print "Exception info: type=" exc_type "value=" exc_val)
    False))  # Don't suppress exceptions

# Test basic context manager
(print "\nTesting basic context manager:")
(= ctx (SimpleContext "test"))
(with ctx as context
  (print "Inside with block")
  (assert (== context ctx) "Context variable should be the context manager")
  (assert context.entered "Enter method should have been called"))
(assert ctx.exited "Exit method should have been called")

# -- Exception Handling in Context Managers --

(print "\n-- Exception Handling in Context Managers --")

# Define a context manager that can optionally suppress exceptions
(class SuppressibleContext ()
  (def (init self suppress)
    (= self.suppress suppress))
  
  (def (__enter__ self)
    (print "\nEntering suppressible context, suppress=" self.suppress)
    self)
  
  (def (__exit__ self exc_type exc_val exc_tb)
    (print "Exiting suppressible context")
    (if exc_type
      (print "Caught exception:" exc_type exc_val))
    self.suppress))  # Return suppress value to determine if exception is suppressed

# Test exception handling without suppression
(print "\nTesting exception without suppression:")
(try
  (with (SuppressibleContext False) as ctx
    (print "Inside with block, about to raise exception")
    (raise ValueError "Test error"))
  (except ValueError as e
    (print "Exception propagated as expected:" e)))

# Test exception suppression
(print "\nTesting exception with suppression:")
(with (SuppressibleContext True) as ctx
  (print "Inside with block, about to raise exception")
  (raise ValueError "This should be suppressed"))
(print "Continued execution after suppressed exception")

# -- Nested Context Managers --

(print "\n-- Nested Context Managers --")

# Test nested context managers
(print "\nTesting nested context managers:")
(with (SimpleContext "outer") as outer
  (print "In outer context")
  (with (SimpleContext "inner") as inner
    (print "In nested context")
    (assert outer.entered "Outer context should be entered")
    (assert inner.entered "Inner context should be entered"))
  (assert inner.exited "Inner context should be exited")
  (assert (not inner.entered) "Inner context should not be re-entered"))
(assert outer.exited "Outer context should be exited")

# -- Resource Management --

(print "\n-- Resource Management --")

# Define a context manager for a mock resource
(class MockResource ()
  (def (init self name)
    (= self.name name)
    (= self.open False))
  
  (def (open_resource self)
    (= self.open True)
    (print "\nOpened resource:" self.name))
  
  (def (close_resource self)
    (= self.open False)
    (print "Closed resource:" self.name))
  
  (def (__enter__ self)
    (self.open_resource)
    self)
  
  (def (__exit__ self exc_type exc_val exc_tb)
    (self.close_resource)
    False))

# Test resource management
(print "\nTesting resource management:")
(= resource (MockResource "test_resource"))
(assert (not resource.open) "Resource should start closed")
(with resource as r
  (assert r.open "Resource should be opened in context")
  (print "Using resource inside context"))
(assert (not resource.open) "Resource should be closed after context")

# Test resource cleanup after exception
(print "\nTesting resource cleanup after exception:")
(= resource (MockResource "exception_resource"))
(try
  (with resource as r
    (print "About to raise exception with resource open")
    (raise RuntimeError "Test exception"))
  (except RuntimeError as e
    (print "Exception caught:" e)))
(assert (not resource.open) "Resource should be closed even after exception")

# -- Multiple Resources in Single Context --

(print "\n-- Multiple Resources in Single Context --")

# Test handling multiple resources in a single with statement
(print "\nTesting multiple resources:")
(with (MockResource "resource1") as r1, (MockResource "resource2") as r2
  (print "Using multiple resources")
  (assert r1.open "First resource should be open")
  (assert r2.open "Second resource should be open"))
(print "Both resources should be closed now")

# -- File Context Manager (Built-in) --

(print "\n-- File Context Manager --")

# Test the built-in file context manager
(print "\nTesting file context manager:")
# Create a temporary file
(with (open "test_context.txt" "w") as file
  (print "Writing to test file")
  (file.write "Line 1\nLine 2\nLine 3"))

# Read the file back
(with (open "test_context.txt" "r") as file
  (print "Reading from test file")
  (= content (file.read))
  (print "File content:" content)
  (assert (in "Line 1" content) "File should contain the written content"))

# -- Custom Context Manager Function (if supported) --

(print "\n-- Custom Context Manager Function --")

# Test contextlib.contextmanager decorator equivalent if supported
(try
  (def (temp_directory)
    (print "\nCreating temporary directory")
    (try
      (print "Directory created")
      (yield "temp_dir")  # This would be the context value
      (finally
        (print "Removing temporary directory"))))
  
  (with (temp_directory) as dir
    (print "Inside temp directory context, dir =" dir)
    (assert (== dir "temp_dir") "Context value should be passed through"))
  
  (except Exception as e
    (print "Custom context manager function not supported:" e)))

# -- Programmatic Context Management (if supported) --

(print "\n-- Programmatic Context Management --")

# Test manually calling __enter__ and __exit__ if needed
(print "\nTesting programmatic context management:")
(= manual_ctx (SimpleContext "manual"))
(try
  (= context_var (manual_ctx.__enter__))
  (print "Manually entered context")
  (assert manual_ctx.entered "Context should be marked as entered")
  
  # Do something with the context
  (print "Doing work with manually entered context")
  
  # Always call __exit__ even if exception occurs
  (try
    # Simulate some operation that might fail
    (print "Operation completed successfully")
    (finally
      (manual_ctx.__exit__ None None None)
      (print "Manually exited context")
      (assert manual_ctx.exited "Context should be marked as exited")))
  
  (except Exception as e
    (print "Programmatic context management not supported as expected:" e)))

# -- Cleanup --

(print "\n-- Cleanup --")

# Clean up any test files created
(try
  (import "os")
  (os.remove "test_context.txt")
  (print "\nRemoved test file")
  (except Exception as e
    (print "Could not remove test file:" e)))

# -- Conclusion --

(print "\n===== Context Manager Tests Complete =====")