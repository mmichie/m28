;; List and Sequence Operations Tests
(run-test "Additional List Operations" (lambda ()
  (and (assert (eq (caddr '(1 2 3)) 3))
       (assert (eq (cadr '(1 2 3)) 2))
       (assert (consp '(1 2)))
       (assert (eq (first '(1 2 3)) 1))
       (assert (eq (last '(1 2 3)) 3))
       (assert (= (length '(1 2 3)) 3))
       (assert (eq (nth 1 '(1 2 3)) 2))
       (assert (equal (nthcdr 1 '(1 2 3)) '(2 3)))
       (assert (null nil))
       (assert (null? nil))
       (assert (eq (second '(1 2 3)) 2))
       (assert (eq (third '(1 2 3)) 3)))))

(run-test "Sequence Operations" (lambda ()
  (and (assert (equal (subseq '(1 2 3 4 5) 1 3) '(2 3)))
       (assert (equal (reverse '(1 2 3)) '(3 2 1)))
       (assert (equal (remove 2 '(1 2 3 2 4)) '(1 3 4)))
       (assert (equal (remove-if (lambda (x) (> x 2)) '(1 2 3 4)) '(1 2)))
       (assert (equal (remove-if-not (lambda (x) (> x 2)) '(1 2 3 4)) '(3 4)))
       (assert (= (reduce '+ '(1 2 3 4)) 10))
       (assert (= (count 2 '(1 2 2 3 2)) 3))
       (assert (= (count-if (lambda (x) (> x 2)) '(1 2 3 4 5)) 3))
       (assert (equal (remove-duplicates '(1 2 2 3 3 3)) '(1 2 3)))
       (assert (equal (substitute 'z 'a '(a b a c)) '(z b z c)))
       (assert (equal (sort '(3 1 4 1 5 9) '<) '(1 1 3 4 5 9)))
       (assert (equal (stable-sort '(3 1 4 1 5 9) '<) '(1 1 3 4 5 9)))
       (assert (= (position 'c '(a b c d)) 2)))))

(run-test "Car" (lambda ()
  (assert (eq (car '(1 2 3)) 1))))

(run-test "Cdr" (lambda ()
  (assert (equal (cdr '(1 2 3)) '(2 3)))))

(run-test "Cons" (lambda ()
  (and (assert (equal (cons 1 '(2 3)) '(1 2 3)))
       (assert (equal (cons 1 2) '(1 . 2)))
       (assert (equal (cons 1 nil) '(1)))
       (assert (= (car (cons 1 2)) 1))
       (assert (= (cdr (cons 1 2)) 2)))))

(run-test "List" (lambda ()
  (assert (equal (list 1 2 3) '(1 2 3)))))

(run-test "Append" (lambda ()
  (assert (equal (append '(1 2) '(3 4)) '(1 2 3 4)))))
