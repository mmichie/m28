(import test-utils)

(def (test-addition)
  (and
    (assert (== (+ 1 2) 3) "Basic addition failed")
    (assert (== (+ -1 1) 0) "Addition with negative numbers failed")
    (assert (== (+ 2.5 3.5) 6.0) "Addition with floating point numbers failed")
    (assert (== (+ 1 2 3 4 5) 15) "Multi-argument addition failed")))

(def (test-subtraction)
  (and
    (assert (== (- 5 3) 2) "Basic subtraction failed")
    (assert (== (- 5 -3) 8) "Subtraction with negative numbers failed")
    (assert (== (- 5.5 2.2) 3.3) "Subtraction with floating point numbers failed")
    (assert (approx-eq (- 5.5 2.2) 3.3 0.000001 "Floating point precision issue"))))

(def (test-multiplication)
  (and
    (assert (== (* 2 3) 6) "Basic multiplication failed")
    (assert (== (* -2 3) -6) "Multiplication with negative numbers failed")
    (assert (== (* 0 100) 0) "Multiplication by zero failed")
    (assert (== (* 2.5 4) 10.0) "Multiplication with floating point failed")
    (assert (== (* 2 3 4) 24) "Multi-argument multiplication failed")))

(def (test-division)
  (and
    (assert (== (/ 6 2) 3) "Basic division failed")
    (assert (== (/ 6 -2) -3) "Division with negative numbers failed")
    (assert (== (/ 5 2) 2.5) "Division resulting in floating point failed")
    (assert (approx-eq (/ 10 3) 3.333333 0.000001 "Division precision issue"))))

(def (test-modulo)
  (and
    (assert (== (% 10 3) 1) "Basic modulo failed")
    (assert (== (% -10 3) 2) "Modulo with negative dividend failed")
    (assert (== (% 10 -3) -2) "Modulo with negative divisor failed")))

(def (test-power)
  (and
    (assert (== (** 2 3) 8) "Basic power operation failed")
    (assert (== (** 2 0) 1) "Power with zero exponent failed")
    (assert (== (** 2 -1) 0.5) "Power with negative exponent failed")
    (assert (== (** 4 0.5) 2.0) "Power with fractional exponent failed")))

(def (test-complex-expressions)
  (and
    (assert (== (+ (* 2 3) (/ 10 2)) 11) "Complex expression 1 failed")
    (assert (== (/ (- 10 (* 2 3)) 2) 2) "Complex expression 2 failed")
    (assert (== (+ 1 (- 3 (+ 1 1))) 2) "Nested expression failed")))

(def (test-operator-precedence)
  (and
    (assert (== (+ 2 * 3 4) 14) "Operator precedence issue: + and *")
    (assert (== (- 10 / 5 2) 8) "Operator precedence issue: - and /")))

(def arithmetic-tests 
  (list 
    (list "Addition" test-addition)
    (list "Subtraction" test-subtraction)
    (list "Multiplication" test-multiplication)
    (list "Division" test-division)
    (list "Modulo" test-modulo)
    (list "Power" test-power)
    (list "Complex Expressions" test-complex-expressions)
    (list "Operator Precedence" test-operator-precedence)))

(def (run-arithmetic-tests)
  (test-suite "Arithmetic Tests" arithmetic-tests))

(run-arithmetic-tests)