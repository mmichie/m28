; Consolidated Function Test Suite

(print "===== Function Tests =====\n")

; Section 1: Basic Function Definition and Usage
(print "-- Basic Function Definition --")

; Simple function definition
(print "\nTest 1.1: Simple Function Definition")
(def (add-two-numbers a b)
  (+ a b))

(print "add-two-numbers(2, 3) =")
(print (add-two-numbers 2 3))
(print "Expected: 5")

(print "add-two-numbers(-1, 1) =")
(print (add-two-numbers -1 1))
(print "Expected: 0")

; Section 2: Recursive Functions
(print "\n-- Recursive Functions --")

(print "\nTest 2.1: Factorial Function")
(def (factorial n)
  (if (<= n 1)
      1
      (* n (factorial (- n 1)))))

(print "factorial(0) =")
(print (factorial 0))
(print "Expected: 1")

(print "factorial(5) =")
(print (factorial 5))
(print "Expected: 120")

(print "\nTest 2.2: Fibonacci Function")
(def (fibonacci n)
  (if (< n 2)
      n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

(print "fibonacci(0) =")
(print (fibonacci 0))
(print "Expected: 0")

(print "fibonacci(1) =")
(print (fibonacci 1))
(print "Expected: 1")

(print "fibonacci(5) =")
(print (fibonacci 5))
(print "Expected: 5")

; Section 3: Function as First-Class Objects
(print "\n-- Functions as Values --")

(print "\nTest 3.1: Function Definition")
(def (square x)
  (* x x))

(def (double x)
  (* x 2))

(def (add x y)
  (+ x y))

(print "square(5) =")
(print (square 5))
(print "Expected: 25")

(print "double(4) =")
(print (double 4))
(print "Expected: 8")

(print "add(3, 4) =")
(print (add 3 4))
(print "Expected: 7")

; Section 4: Higher-Order Functions
(print "\n-- Higher-Order Functions --")

(print "\nTest 4.1: Function as Argument")
(def (apply-twice func x)
  (func (func x)))

(print "apply-twice(square, 3) =")
(print (apply-twice square 3))
(print "Expected: 81")

(print "apply-twice(double, 5) =")
(print (apply-twice double 5))
(print "Expected: 20")

; Section 5: Basic Closures
(print "\n-- Basic Closure Test --")
(def (make-adder n)
  (lambda (x)
    (+ x n)))

(= add5 (make-adder 5))
(= add10 (make-adder 10))

(print "add5(3) =")
(print (add5 3))
(print "Expected: 8")

(print "add10(3) =")
(print (add10 3))
(print "Expected: 13")

(print "\n===== Function Tests Complete =====")