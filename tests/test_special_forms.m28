# Special forms tests

(import "test_framework" as test)

(def test-special-forms (lambda ()
  
  ; Test definition forms
  (test/test-suite "Definition Forms" (lambda ()
    
    (test/run-test "Def Form" (lambda ()
      (= x 42)
      (test/assert-eq 42 x "Simple def")
      (def y (+ x 8))
      (test/assert-eq 50 y "Def with expression")
      (def z)
      (test/assert-nil z "Def without value")))
    
    (test/run-test "Def Function" (lambda ()
      (def add (a b) (+ a b))
      (test/assert-eq 7 (add 3 4) "Function def")
      (def greet (name) 
        (+ "Hello, " name "!"))
      (test/assert-eq "Hello, World!" (greet "World") "String function")))
    
    (test/run-test "Set! Form" (lambda ()
      (= x 10)
      (set! x 20)
      (test/assert-eq 20 x "Set! updates value")
      (= y [1, 2, 3])
      (set! y (append y 4))
      (test/assert-eq [1, 2, 3, 4] y "Set! with expression"))))
  
  ; Test quote and eval
  (test/test-suite "Quote and Eval" (lambda ()
    
    (test/run-test "Quote" (lambda ()
      (test/assert-eq 'x (quote x) "Quote symbol")
      (test/assert-eq '(+ 1 2) (quote (+ 1 2)) "Quote list")
      (test/assert-type 'x "symbol" "Quoted symbol type")))
    
    (test/run-test "Eval" (lambda ()
      (test/assert-eq 3 (eval '(+ 1 2)) "Eval expression")
      (= code '(* 5 6))
      (test/assert-eq 30 (eval code) "Eval variable"))))
  
  ; Test control flow forms
  (test/test-suite "Control Flow Forms" (lambda ()
    
    (test/run-test "If Form" (lambda ()
      (test/assert-eq "yes" (if true "yes" "no") "If true")
      (test/assert-eq "no" (if false "yes" "no") "If false")
      (test/assert-nil (if false "yes") "If no else")
      (test/assert-eq 10 (if (> 5 3) 10 20) "If with condition")))
    
    (test/run-test "Cond Form" (lambda ()
      (def test-cond (lambda (x)
        (cond
          (< x 0) "negative"
          (= x 0) "zero"
          (> x 0) "positive")))
      (test/assert-eq "negative" (test-cond -5) "Cond negative")
      (test/assert-eq "zero" (test-cond 0) "Cond zero")
      (test/assert-eq "positive" (test-cond 5) "Cond positive")))
    
    (test/run-test "Case Form" (lambda ()
      (def test-case (lambda (x)
        (case x
          1 "one"
          2 "two"
          (3 4 5) "three to five"
          "default")))
      (test/assert-eq "one" (test-case 1) "Case exact match")
      (test/assert-eq "three to five" (test-case 4) "Case multiple")
      (test/assert-eq "default" (test-case 10) "Case default")))
    
    (test/run-test "Do Form" (lambda ()
      (def result (do
        (= x 1)
        (= y 2)
        (+ x y)))
      (test/assert-eq 3 result "Do returns last")
      (= counter 0)
      (do
        (set! counter (+ counter 1))
        (set! counter (+ counter 1)))
      (test/assert-eq 2 counter "Do side effects"))))
  
  ; Test let forms
  (test/test-suite "Let Forms" (lambda ()
    
    (test/run-test "Let" (lambda ()
      (= x 10)
      (def result (let ((x 20) (y 5))
        (+ x y)))
      (test/assert-eq 25 result "Let binding")
      (test/assert-eq 10 x "Let doesn't change outer")))
    
    (test/run-test "Let*" (lambda ()
      (def result (let* ((x 10) (y (+ x 5)))
        y))
      (test/assert-eq 15 result "Let* sequential binding"))))
  
  ; Test loop forms
  (test/test-suite "Loop Forms" (lambda ()
    
    (test/run-test "For Loop" (lambda ()
      (= sum 0)
      (for i in [1, 2, 3, 4, 5]
        (set! sum (+ sum i)))
      (test/assert-eq 15 sum "For loop")
      
      (= pairs [])
      (for x in ["a", "b"]
        (for y in [1, 2]
          (set! pairs (append pairs [x, y]))))
      (test/assert-eq [["a", 1], ["a", 2], ["b", 1], ["b", 2]] pairs "Nested for")))
    
    (test/run-test "While Loop" (lambda ()
      (= n 0)
      (= sum 0)
      (while (< n 5)
        (set! sum (+ sum n))
        (set! n (+ n 1)))
      (test/assert-eq 10 sum "While loop")))
    
    (test/run-test "Loop Control" (lambda ()
      (= result [])
      (for i in (range 10)
        (if (= i 5) (break))
        (set! result (append result i)))
      (test/assert-eq [0, 1, 2, 3, 4] result "Break")
      
      (set! result [])
      (for i in (range 5)
        (if (= (% i 2) 0) (continue))
        (set! result (append result i)))
      (test/assert-eq [1, 3] result "Continue"))))
  
  ; Test exception handling
  (test/test-suite "Exception Handling" (lambda ()
    
    (test/run-test "Try/Except" (lambda ()
      (def result (try
        (/ 10 2)
        (except Exception e "error")))
      (test/assert-eq 5 result "Try no error")
      
      (def result (try
        (/ 10 0)
        (except ZeroDivisionError e "div-zero")))
      (test/assert-eq "div-zero" result "Try catch error")))
    
    (test/run-test "Try/Finally" (lambda ()
      (= cleanup false)
      (try
        (/ 10 2)
        (finally (set! cleanup true)))
      (test/assert-true cleanup "Finally runs on success")
      
      (set! cleanup false)
      (try
        (try
          (/ 10 0)
          (finally (set! cleanup true)))
        (except ZeroDivisionError e nil))
      (test/assert-true cleanup "Finally runs on error")))
    
    (test/run-test "Raise" (lambda ()
      (= caught false)
      (try
        (raise "Custom error")
        (except Exception e
          (set! caught true)))
      (test/assert-true caught "Raise custom error"))))
  
  ; Test lambda and function forms
  (test/test-suite "Function Forms" (lambda ()
    
    (test/run-test "Lambda" (lambda ()
      (def add (lambda (x y) (+ x y)))
      (test/assert-eq 7 (add 3 4) "Lambda function")
      
      (def make-adder (lambda (n)
        (lambda (x) (+ x n))))
      (def add5 (make-adder 5))
      (test/assert-eq 12 (add5 7) "Lambda closure")))
    
    (test/run-test "Apply" (lambda ()
      (test/assert-eq 10 (apply + [1, 2, 3, 4]) "Apply sum")
      (test/assert-eq [1, 2, 3] (apply list [1, 2, 3]) "Apply list")))
    
    (test/run-test "Return" (lambda ()
      (def early-return (lambda (x)
        (if (< x 0) (return "negative"))
        (if (= x 0) (return "zero"))
        "positive"))
      (test/assert-eq "negative" (early-return -5) "Early return 1")
      (test/assert-eq "zero" (early-return 0) "Early return 2")
      (test/assert-eq "positive" (early-return 5) "No return"))))
  
  )))