# Test the traceback system in the exception handling mechanism

(print "=== Testing Traceback System ===")

(print "\n1. Basic exception with traceback:")

# Function that raises an exception
(def (function-with-error)
  (/ 10 0))

# Try to call the function and catch the error
(try
  (function-with-error)
  (except as e
    (print e)))

(print "\n2. Nested function calls with traceback:")

# Define nested functions that will create a deeper call stack
(def (inner-function)
  (/ 1 0))

(def (middle-function)
  (inner-function))

(def (outer-function)
  (middle-function))

# Call the outer function which will eventually raise an exception
(try
  (outer-function)
  (except as e
    (print e)))

(print "\n3. Exception with custom type:")

# Define a custom exception type
(defexception CustomError Exception)

# Function that raises a custom exception
(def (raise-custom-error)
  (raise CustomError "This is a custom error message"))

# Call the function and catch the error
(try
  (raise-custom-error)
  (except CustomError as e
    (print e)))

(print "\n4. Exception chaining with traceback:")

# Define functions for exception chaining
(def (original-error)
  (raise ValueError "Original error message"))

(def (chain-error)
  (try
    (original-error)
    (except ValueError as cause
      # Raise a new exception with the original as the cause
      (raise TypeError "Chained error message" cause))))

# Call the function and catch the error
(try
  (chain-error)
  (except TypeError as e
    (print e)))

(print "\n=== Traceback Tests Complete ===")