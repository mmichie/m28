# Core functionality tests

(import "test_framework" as test)

(def test-core (lambda ()
  ; Test basic data types
  (test/test-suite "Core Data Types" (lambda ()
    
    (test/run-test "Numbers" (lambda ()
      (test/assert-eq 42 42 "Integer equality")
      (test/assert-eq 3.14 3.14 "Float equality")
      (test/assert-eq 10 (+ 5 5) "Addition")
      (test/assert-eq 20 (* 4 5) "Multiplication")
      (test/assert-eq 3 (/ 15 5) "Division")
      (test/assert-eq 7 (- 10 3) "Subtraction")))
    
    (test/run-test "Strings" (lambda ()
      (test/assert-eq "hello" "hello" "String equality")
      (test/assert-eq "hello world" (+ "hello" " " "world") "String concatenation")
      (test/assert-eq 5 (len "hello") "String length")
      (test/assert-type "test" "string" "String type")))
    
    (test/run-test "Booleans" (lambda ()
      (test/assert-true true "True value")
      (test/assert-false false "False value")
      (test/assert-true (= 1 1) "Equality returns true")
      (test/assert-false (= 1 2) "Inequality returns false")))
    
    (test/run-test "Nil" (lambda ()
      (test/assert-nil nil "Nil value")
      (test/assert-eq nil nil "Nil equality")
      (test/assert-false (= nil false) "Nil is not false")
      (test/assert-false (= nil 0) "Nil is not zero"))))
  
  ; Test collections
  (test/test-suite "Collections" (lambda ()
    
    (test/run-test "Lists" (lambda ()
      (test/assert-eq [1, 2, 3] [1, 2, 3] "List equality")
      (test/assert-eq 3 (len [1, 2, 3]) "List length")
      (test/assert-eq 2 (nth [1, 2, 3] 1) "List indexing")
      (test/assert-eq [1, 2, 3, 4] (append [1, 2, 3] 4) "List append")
      (test/assert-type [] "list" "Empty list type")))
    
    (test/run-test "Tuples" (lambda ()
      (test/assert-eq (1, 2, 3) (1, 2, 3) "Tuple equality")
      (test/assert-eq 3 (len (1, 2, 3)) "Tuple length")
      (test/assert-eq 2 (nth (1, 2, 3) 1) "Tuple indexing")
      (test/assert-type () "tuple" "Empty tuple type")))
    
    (test/run-test "Dictionaries" (lambda ()
      (= d {"a": 1, "b": 2})
      (test/assert-eq 1 (get d "a") "Dict get")
      (test/assert-eq 2 (len d) "Dict length")
      (test/assert-true (has-key d "a") "Dict has-key")
      (test/assert-false (has-key d "c") "Dict missing key")
      (test/assert-type {} "dict" "Empty dict type")))
    
    (test/run-test "Sets" (lambda ()
      (= s #{1, 2, 3})
      (test/assert-eq 3 (len s) "Set length")
      (test/assert-true (contains s 2) "Set contains")
      (test/assert-false (contains s 4) "Set not contains")
      (test/assert-type #{} "set" "Empty set type"))))
  
  ; Test variables and functions
  (test/test-suite "Variables and Functions" (lambda ()
    
    (test/run-test "Variable Definition" (lambda ()
      (= x 10)
      (test/assert-eq 10 x "Simple variable")
      (def y (+ x 5))
      (test/assert-eq 15 y "Computed variable")))
    
    (test/run-test "Variable Update" (lambda ()
      (= x 10)
      (set! x 20)
      (test/assert-eq 20 x "Variable update")))
    
    (test/run-test "Lambda Functions" (lambda ()
      (def add (lambda (a b) (+ a b)))
      (test/assert-eq 7 (add 3 4) "Lambda call")
      (test/assert-type add "function" "Lambda type")))
    
    (test/run-test "Named Functions" (lambda ()
      (def square (x) (* x x))
      (test/assert-eq 25 (square 5) "Named function call")
      (def factorial (n)
        (if (= n 0)
          1
          (* n (factorial (- n 1)))))
      (test/assert-eq 120 (factorial 5) "Recursive function")))
    
    (test/run-test "Closures" (lambda ()
      (def make-counter (lambda ()
        (= count 0)
        (lambda ()
          (set! count (+ count 1))
          count)))
      (def c1 (make-counter))
      (def c2 (make-counter))
      (test/assert-eq 1 (c1) "Counter 1 first call")
      (test/assert-eq 2 (c1) "Counter 1 second call")
      (test/assert-eq 1 (c2) "Counter 2 first call"))))
  
  ; Test control flow
  (test/test-suite "Control Flow" (lambda ()
    
    (test/run-test "If Expression" (lambda ()
      (test/assert-eq 10 (if true 10 20) "If true branch")
      (test/assert-eq 20 (if false 10 20) "If false branch")
      (test/assert-nil (if false 10) "If without else")))
    
    (test/run-test "Cond Expression" (lambda ()
      (def grade (lambda (score)
        (cond
          (>= score 90) "A"
          (>= score 80) "B"
          (>= score 70) "C"
          (>= score 60) "D"
          true "F")))
      (test/assert-eq "A" (grade 95) "Cond first match")
      (test/assert-eq "C" (grade 75) "Cond middle match")
      (test/assert-eq "F" (grade 50) "Cond default")))
    
    (test/run-test "And/Or" (lambda ()
      (test/assert-true (and true true) "And true")
      (test/assert-false (and true false) "And false")
      (test/assert-true (or true false) "Or true")
      (test/assert-false (or false false) "Or false")
      (test/assert-eq 5 (and 3 5) "And returns last")
      (test/assert-eq 3 (or 3 5) "Or returns first")))
    
    (test/run-test "Let Binding" (lambda ()
      (= x 10)
      (test/assert-eq 25 
        (let ((x 20) (y 5))
          (+ x y))
        "Let binding")
      (test/assert-eq 10 x "Let doesn't affect outer"))))
  
  ; Test loops
  (test/test-suite "Loops" (lambda ()
    
    (test/run-test "For Loop" (lambda ()
      (= sum 0)
      (for x in [1, 2, 3, 4, 5]
        (set! sum (+ sum x)))
      (test/assert-eq 15 sum "For loop sum")
      
      (= squares [])
      (for x in (range 5)
        (set! squares (append squares (* x x))))
      (test/assert-eq [0, 1, 4, 9, 16] squares "For with range")))
    
    (test/run-test "While Loop" (lambda ()
      (= x 0)
      (= sum 0)
      (while (< x 5)
        (set! sum (+ sum x))
        (set! x (+ x 1)))
      (test/assert-eq 10 sum "While loop sum")))
    
    (test/run-test "Break/Continue" (lambda ()
      (= result [])
      (for x in (range 10)
        (if (= x 5) (break))
        (if (= (% x 2) 0) (continue))
        (set! result (append result x)))
      (test/assert-eq [1, 3] result "Break and continue"))))
  
  )))