# Test container protocols: __getitem__, __setitem__, __delitem__, __contains__

# Test basic list indexing with protocols
(= lst [1, 2, 3, 4, 5])
(assert (== (get-item lst 0) 1) "list get-item first element")
(assert (== (get-item lst -1) 5) "list get-item negative index")
(assert (== (get-item lst 2) 3) "list get-item middle element")

# Test list assignment
(set-item lst 1 20)
(assert (== (get-item lst 1) 20) "list set-item")
(assert (== lst [1, 20, 3, 4, 5]) "list modified correctly")

# Test dictionary indexing
(= d {"a": 1, "b": 2, "c": 3})
(assert (== (get-item d "a") 1) "dict get-item")
(assert (== (get-item d "b") 2) "dict get-item")

# Test dictionary assignment
(set-item d "b" 20)
(assert (== (get-item d "b") 20) "dict set-item")
(set-item d "d" 4)
(assert (== (get-item d "d") 4) "dict set-item new key")

# Test tuple indexing (read-only)
(= t (1, 2, 3))
(assert (== (get-item t 0) 1) "tuple get-item")
(assert (== (get-item t -1) 3) "tuple get-item negative")

# Test string indexing (read-only)
(= s "hello")
(assert (== (get-item s 0) "h") "string get-item first")
(assert (== (get-item s -1) "o") "string get-item last")
(assert (== (get-item s 1) "e") "string get-item middle")

# Test error cases
(try
    (get-item lst 10)
    (assert False "should raise IndexError")
    (except IndexError e
        (assert True "IndexError raised correctly")))

(try
    (get-item d "nonexistent")
    (assert False "should raise KeyError")
    (except KeyError e
        (assert True "KeyError raised correctly")))

(try
    (set-item t 0 10)
    (assert False "should raise error for tuple assignment")
    (except Exception e
        (assert True "tuple assignment error raised")))

(try
    (set-item s 0 "H")
    (assert False "should raise error for string assignment")
    (except Exception e
        (assert True "string assignment error raised")))

# Test custom class with indexing protocols
(class Vector
    (def __init__ (self)
        (= self.data [])
        self)
    
    (def from_values (cls . values)
        (= v (cls))
        (= v.data (list values))
        v))
    
    (def __getitem__ (self index)
        (get-item self.data index))
    
    (def __setitem__ (self index value)
        (set-item self.data index value)
        None)
    
    (def __delitem__ (self index)
        (del-item self.data index)
        None)
    
    (def __len__ (self)
        (len self.data))
    
    (def __contains__ (self item)
        (in item self.data)))

# Test custom vector class
(= v (Vector 10 20 30))
(assert (== (get-item v 0) 10) "custom __getitem__")
(assert (== (get-item v 1) 20) "custom __getitem__")
(assert (== (get-item v -1) 30) "custom __getitem__ negative")

# Test custom setitem
(set-item v 1 25)
(assert (== (get-item v 1) 25) "custom __setitem__")

# Test custom contains
(assert (in 10 v) "custom __contains__ true")
(assert (in 25 v) "custom __contains__ true after modification")
(assert (not (in 20 v)) "custom __contains__ false")
(assert (not (in 100 v)) "custom __contains__ false")

# Test custom len
(assert (== (len v) 3) "custom __len__")

# Test del-item on list
(= lst2 [1, 2, 3, 4, 5])
(del-item lst2 2)
(assert (== lst2 [1, 2, 4, 5]) "del-item on list")
(del-item lst2 -1)
(assert (== lst2 [1, 2, 4]) "del-item negative index")

# Test del-item on dict
(= d2 {"a": 1, "b": 2, "c": 3})
(del-item d2 "b")
(assert (not (in "b" d2)) "del-item on dict")
(assert (== (len d2) 2) "dict size after deletion")

# Test del-item on custom class
(= v2 (Vector 1 2 3 4 5))
(del-item v2 2)
(assert (== (get-item v2 2) 4) "custom __delitem__")
(assert (== (len v2) 4) "length after custom deletion")

# Test slicing still works
(= lst3 [0, 1, 2, 3, 4, 5])
(= sliced (get-item lst3 (slice 1 4 None)))
(assert (== sliced [1, 2, 3]) "slicing with slice object")

print("All container protocol tests passed!")