# Test range object functionality

# Get the range type for comparisons
(= range_type (type (range 1)))

(print "=== Basic Range Creation ===")

# Test range with single argument (stop)
(= r1 (range 5))
(print "range(5) =" r1)
(assert (== (type r1) range_type) "range(5) should create a range object")
(assert (== (str r1) "range(5)") "range(5) string representation")

# Test range with two arguments (start, stop)
(= r2 (range 2 7))
(print "range(2, 7) =" r2)
(assert (== (str r2) "range(2, 7)") "range(2, 7) string representation")

# Test range with three arguments (start, stop, step)
(= r3 (range 1 10 2))
(print "range(1, 10, 2) =" r3)
(assert (== (str r3) "range(1, 10, 2)") "range(1, 10, 2) string representation")

# Test negative step
(= r4 (range 10 0 -2))
(print "range(10, 0, -2) =" r4)
(assert (== (str r4) "range(10, 0, -2)") "range(10, 0, -2) string representation")

(print "\n=== Range Properties ===")

# Test start, stop, step attributes
(assert (== r2.start 2) "range.start property")
(assert (== r2.stop 7) "range.stop property")
(assert (== r2.step 1) "range.step property")

(assert (== r3.start 1) "range with step - start property")
(assert (== r3.stop 10) "range with step - stop property")
(assert (== r3.step 2) "range with step - step property")

(print "\n=== Range Length ===")

# Test len() function on ranges
(assert (== (len r1) 5) "len(range(5)) should be 5")
(assert (== (len r2) 5) "len(range(2, 7)) should be 5")
(assert (== (len r3) 5) "len(range(1, 10, 2)) should be 5")
(assert (== (len r4) 5) "len(range(10, 0, -2)) should be 5")

# Test empty ranges
(= empty1 (range 5 5))
(= empty2 (range 5 2))
(= empty3 (range 5 10 -1))
(assert (== (len empty1) 0) "Empty range - same start/stop")
(assert (== (len empty2) 0) "Empty range - stop < start with positive step")
(assert (== (len empty3) 0) "Empty range - stop > start with negative step")

(print "\n=== Range Iteration ===")

# Test basic iteration
(= result [])
(for i in (range 5)
  (= result (result.append i)))
(print "list(range(5)) =" result)
(assert (== result [0, 1, 2, 3, 4]) "range(5) iteration")

# Test iteration with start/stop
(= result [])
(for i in (range 2 7)
  (= result (result.append i)))
(print "list(range(2, 7)) =" result)
(assert (== result [2, 3, 4, 5, 6]) "range(2, 7) iteration")

# Test iteration with step
(= result [])
(for i in (range 1 10 2)
  (= result (result.append i)))
(print "list(range(1, 10, 2)) =" result)
(assert (== result [1, 3, 5, 7, 9]) "range(1, 10, 2) iteration")

# Test iteration with negative step
(= result [])
(for i in (range 10 0 -2)
  (= result (result.append i)))
(print "list(range(10, 0, -2)) =" result)
(assert (== result [10, 8, 6, 4, 2]) "range(10, 0, -2) iteration")

(print "\n=== Range Indexing ===")

# Test positive indexing
(assert (== r1[0] 0) "range(5)[0]")
(assert (== r1[2] 2) "range(5)[2]")
(assert (== r1[4] 4) "range(5)[4]")

(assert (== r2[0] 2) "range(2, 7)[0]")
(assert (== r2[2] 4) "range(2, 7)[2]")
(assert (== r2[4] 6) "range(2, 7)[4]")

(assert (== r3[0] 1) "range(1, 10, 2)[0]")
(assert (== r3[2] 5) "range(1, 10, 2)[2]")
(assert (== r3[4] 9) "range(1, 10, 2)[4]")

# Test negative indexing
(assert (== r1[-1] 4) "range(5)[-1]")
(assert (== r1[-3] 2) "range(5)[-3]")
(assert (== r1[-5] 0) "range(5)[-5]")

# Test index out of bounds
(try
  r1[5]
  (assert False "Should raise IndexError for out of bounds")
(except Exception as e
  (print "Expected IndexError for r1[5]:" e)))

(try
  r1[-6]
  (assert False "Should raise IndexError for negative out of bounds")
(except Exception as e
  (print "Expected IndexError for r1[-6]:" e)))

(print "\n=== Range Membership ===")

# Test 'in' operator
(assert (in 3 r1) "3 in range(5)")
(assert (not (in 5 r1)) "5 not in range(5)")
(assert (not (in -1 r1)) "-1 not in range(5)")

(assert (in 4 r2) "4 in range(2, 7)")
(assert (not (in 1 r2)) "1 not in range(2, 7)")
(assert (not (in 7 r2)) "7 not in range(2, 7)")

(assert (in 5 r3) "5 in range(1, 10, 2)")
(assert (not (in 4 r3)) "4 not in range(1, 10, 2)")
(assert (not (in 10 r3)) "10 not in range(1, 10, 2)")

# Test membership with negative step
(assert (in 6 r4) "6 in range(10, 0, -2)")
(assert (not (in 5 r4)) "5 not in range(10, 0, -2)")
(assert (not (in 0 r4)) "0 not in range(10, 0, -2)")

# Test non-numeric membership
(assert (not (in "3" r1)) "string not in numeric range")
(assert (not (in [3] r1)) "list not in numeric range")

(print "\n=== Range in Control Flow ===")

# Test range in for loop with break
(= result [])
(for i in (range 10)
  (if (== i 5)
    (break))
  (= result (result.append i)))
(assert (== result [0, 1, 2, 3, 4]) "for loop with break")

# Test range in for loop with continue
(= result [])
(for i in (range 10)
  (if (== (% i 2) 0)
    (continue))
  (= result (result.append i)))
(assert (== result [1, 3, 5, 7, 9]) "for loop with continue")

# Test nested range loops
(= result [])
(for i in (range 3)
  (for j in (range 2)
    (= result (result.append [i, j]))))
(assert (== result [[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]]) "nested range loops")

(print "\n=== Range Memory Efficiency ===")

# Test that large ranges don't consume memory
(= huge_range (range 1000000))
(assert (== (type huge_range) range_type) "Large range is still a range object")
(assert (== huge_range[999999] 999999) "Can index into large range")
(assert (in 500000 huge_range) "Membership test on large range")
(print "Successfully created and accessed range(1000000) without memory issues")

# Test zero step error
(try
  (range 1 10 0)
  (assert False "Should raise error for zero step")
(except Exception as e
  (print "Expected error for zero step:" e)))

(print "\n=== All Range Object Tests Passed! ===")