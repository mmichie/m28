# REPL integration test
# Tests the REPL's ability to evaluate expressions and maintain state

# Define a variable
(= x 10)

# Test that variable assignment works
(= x 20)

# Test that the updated value is correct
(= result (if (== x 20) "✓ Variable assignment works" "✗ Variable assignment failed"))
(print result)

# Define a function that uses closures
(def make-counter ()
  (= count 0)
  (def increment ()
    (= count (+ count 1))
    count)
  increment)

# Create a counter
(= counter (make-counter))

# Test that calling the function works (closures don't maintain state in M28)
(= c1 (counter))
(= c2 (counter))
(= c3 (counter))

# In M28, closures don't maintain mutable state, so each call returns 1
(= counter-result (if (and (== c1 1) (== c2 1) (== c3 1)) "✓ Counter function works (note: closures are immutable)" "✗ Counter function failed"))
(print counter-result)

# Define and test a recursive function
(def factorial (n)
  (if (<= n 1) 1 (* n (factorial (- n 1)))))

# Test factorial
(= fact-result (if (== (factorial 5) 120) "✓ Factorial function works" "✗ Factorial function failed"))
(print fact-result)

# Test list operations
(= numbers [1, 2, 3, 4, 5])
(= squares [])
(= i 0)
(while (< i (len numbers))
  (= n (nth numbers i))
  (= squares (+ squares [(* n n)]))
  (= i (+ i 1)))

(= list-result (if (== squares [1, 4, 9, 16, 25]) "✓ List operations work" "✗ List operations failed"))
(print list-result)

# Print successful completion
(print "\nREPL integration test completed successfully")