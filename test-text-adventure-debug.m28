# Copy text adventure with debug prints

(print "DEBUG: Starting imports...")
(import random)
(print "DEBUG: Imports done")

# Base classes for game objects
(print "DEBUG: Defining GameObject...")
(class GameObject
  (def __init__ (self name description)
    (= self.name name)
    (= self.description description))
  
  (def __str__ (self)
    (return self.name)))

(print "DEBUG: Defining Item...")
(class Item (GameObject)
  (def __init__ (self name description portable)
    ((super Item self).__init__ name description)
    (= self.portable portable))
  
  (def use (self player)
    (print f"You can't use the {self.name} here.")))

(print "DEBUG: Defining Room...")
(class Room (GameObject)
  (def __init__ (self name description)
    ((super Room self).__init__ name description)
    (= self.exits {})
    (= self.items [])
    (= self.visited False))
  
  (def add_exit (self direction room)
    (= self.exits[direction] room))
  
  (def add_item (self item)
    (self.items.append item))
  
  (def remove_item (self item)
    (if (in item self.items)
      (self.items.remove item)))
  
  (def get_full_description (self)
    (= desc self.description)
    (if self.items
      (begin
        (= desc (+ desc "\n\nYou can see:"))
        (for item self.items
          (= desc (+ desc f"\n  - {item.name}")))))
    (if self.exits
      (begin
        (= desc (+ desc "\n\nExits:"))
        (for direction (self.exits.keys)
          (= desc (+ desc f"\n  - {direction}")))))
    (return desc)))

(print "DEBUG: Defining Player...")
(class Player
  (def __init__ (self name)
    (= self.name name)
    (= self.inventory [])
    (= self.current_room None)
    (= self.score 0)))

(print "DEBUG: All classes defined. Creating test instances...")
(= item (Item "test" "test item" True))
(print f"DEBUG: Created item: {item}")
(= room (Room "test" "test room"))
(print f"DEBUG: Created room: {room}")
(= player (Player "test"))
(print f"DEBUG: Created player: {player.name}")

(print "DEBUG: Basic functionality test complete!")