# Simple example of super() method calling with inheritance

# Define a simple Animal class
(class Point ()
  # Constructor that sets the x and y attributes
  (def (init self x y)
    # Set attributes directly on the dictionary
    (= (dict "x" x "y" y) self.Attributes.data)
    (print "Created Point with x =" x "and y =" y))
)

# Create a point instance
(def p (Point 10 20))

# Test direct attribute access via dot notation
(print "\n=== Property Access Test ===")
# Access the Attributes field directly through dot notation
(def attrs (dot p "Attributes"))
(print "Point attributes:" attrs)

# Display the attribute values through dictionary access
(print "Point x:" (get attrs "x"))
(print "Point y:" (get attrs "y"))

# Test Animal / Dog inheritance 
(print "\n=== Animal Inheritance Test ===")

(class Animal ()
  # Constructor
  (def (init self name)
    # Set attributes directly on the dictionary
    (= (dict "name" name "species" "Unknown") self.Attributes.data)
    (print "Created Animal with name:" name))
    
  # Method that returns a string 
  (def (speak self)
    "Some generic animal sound")
)

# Create an animal instance
(def a (Animal "Generic"))
(print "Animal speak:" ((dot a "speak") a))

# Define a Dog class that inherits from Animal
(class Dog (Animal)
  # Constructor that calls parent
  (def (init self name breed)
    # Call parent constructor
    ((dot (super self) "init") name)
    # Set additional attributes - add to existing dict
    (= self.Attributes.data (dict "name" (get self.Attributes.data "name")
                                  "species" "Dog" 
                                  "breed" breed))
    (print "Created Dog with breed:" breed))
  
  # Method that returns a different string
  (def (speak self)
    (+ "Woof! I am " (get self.Attributes.data "name") " the " 
       (get self.Attributes.data "breed")))
)

# Create a dog instance
(def d (Dog "Buddy" "Golden Retriever"))

# Call the speak method
(print "Dog speak:" ((dot d "speak") d))