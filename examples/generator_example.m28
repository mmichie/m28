# Generator functionality example
# This shows how generators and yield work in Pythonic Lisp

# Define a simple generator function
(def (count-up-to n)
  (= i 0)
  (while (< i n)
    (yield i)
    (= i (+ i 1))))

# Use the generator with a for loop
(print "Count up to 5:")
(for x (count-up-to 5)
  (print x))

# Define a generator that yields squared values
(def (squares n)
  (for i (range n)
    (yield (* i i))))

# Convert generator results to a list
(print "\nFirst 5 squares:" (list (squares 5)))

# Generator with infinite sequence (Fibonacci)
(def (fibonacci)
  (= a 0)
  (= b 1)
  (while True
    (yield a)
    (= temp (+ a b))
    (= a b)
    (= b temp)))

# Take first 10 Fibonacci numbers
(print "\nFirst 10 Fibonacci numbers:")
(= fib (fibonacci))
(for i (range 10)
  (print (next fib)))

# Generator with exception handling
(def (safe-division divisors)
  (for d divisors
    (try
      (yield (/ 10 d))
      (except ZeroDivisionError
        (yield "Cannot divide by zero")))))

# Use safe division generator
(print "\nSafe division results:")
(for result (safe-division [5 2 0 1])
  (print result))