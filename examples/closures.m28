# Closures example with mutable state

# Example 1: Counter with mutable state
(def (make-counter)
    (= count 0)  # Initialize the counter in the closure's environment
    (def (counter)
        (= count (+ count 1))  # Increment the counter
        (return count))
    (return counter))

(= counter1 (make-counter))
(= counter2 (make-counter))

(print "Counter 1:")
(print (counter1))  # Should print 1
(print (counter1))  # Should print 2
(print (counter1))  # Should print 3

(print "Counter 2:")
(print (counter2))  # Should print 1
(print (counter2))  # Should print 2

(print "Counter 1 again:")
(print (counter1))  # Should print 4

# Example 2: Accumulator that adds to a running total
(def (make-accumulator)
    (= total 0)
    (def (add value)
        (= total (+ total value))
        (return total))
    (return add))

(= acc1 (make-accumulator))
(= acc2 (make-accumulator))

(print "Accumulator 1:")
(print "Add 5: " (acc1 5))    # Should print 5
(print "Add 10: " (acc1 10))  # Should print 15
(print "Add 3: " (acc1 3))    # Should print 18

(print "Accumulator 2:")
(print "Add 7: " (acc2 7))    # Should print 7
(print "Add 8: " (acc2 8))    # Should print 15

(print "Accumulator 1 again:")
(print "Add 20: " (acc1 20))  # Should print 38

# Example 3: Validator with early returns (from previous example)
(def (make-validator min-val max-val)
  (def (validate x)
    (if (< x min-val)
      (return "Too small"))
    (if (> x max-val)
      (return "Too large"))
    (return "Valid"))
  (return validate))

(= check-age (make-validator 0 120))
(= check-percentage (make-validator 0 100))

(print "Age validator:")
(print "Age -5: " (check-age -5))
(print "Age 25: " (check-age 25))
(print "Age 150: " (check-age 150))

(print "Percentage validator:")
(print "Value -10: " (check-percentage -10))
(print "Value 75: " (check-percentage 75))
(print "Value 200: " (check-percentage 200))
