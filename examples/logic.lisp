(defvar facts '())

(defun assert! (fact)
  (setq facts (cons fact facts)))

(defun query (pattern)
  (filter (lambda (fact) (match pattern fact)) facts))

(assert! '(parent john mary))
(assert! '(parent john tom))
(assert! '(parent mary lisa))
(assert! '(parent mary anna))
(assert! '(male john))
(assert! '(female mary))
(assert! '(female lisa))
(assert! '(female anna))
(assert! '(parent tom bob))
(assert! '(male tom))

(defun grandfather (x y)
  (and (any (lambda (z) (match (list 'male x) z)) facts)
       (any (lambda (z) 
              (and (match (list 'parent x '?) z)
                   (any (lambda (w) 
                          (match (list 'parent (cadr z) y) w))
                        facts)))
            facts)))

(print "John's children:")
(print (query '(parent john ?)))
(print "Is John a grandfather of Lisa?")
(print (grandfather 'john 'lisa))
(print "Is John a grandfather of Tom?")
(print (grandfather 'john 'tom))
(print "Is John a grandfather of Bob?")
(print (grandfather 'john 'bob))
(print "All females:")
(print (query '(female ?)))
(print "Mary's children:")
(print (query '(parent mary ?)))
(print "Is there a male in the family?")
(print (any (lambda (fact) (match '(male ?) fact)) facts))
(print "Is there a child named Bob?")
(print (any (lambda (fact) (match '(parent ? bob) fact)) facts))
