# Comprehensive Tuple Operations Example
# This file demonstrates tuple creation, access, operations, and common usage patterns

###########################################
# SECTION 1: TUPLE CREATION
###########################################
(print "\n=== TUPLE CREATION ===")

# Empty tuple
(= empty_tuple ())
(print "Empty tuple:" empty_tuple)

# Single element tuple (note the comma is required)
(= single_element_tuple (1,))
(print "Single element tuple:" single_element_tuple)

# Multi-element tuple with same type
(= numbers_tuple (1, 2, 3, 4, 5))
(print "Numbers tuple:" numbers_tuple)

# Multi-element tuple with mixed types
(= mixed_tuple (1, "two", 3.0, True, None))
(print "Mixed tuple:" mixed_tuple)

# Nested tuple (containing other collections)
(= nested_tuple (1, (2, 3), [4, 5], {"key": "value"}))
(print "Nested tuple:" nested_tuple)

###########################################
# SECTION 2: TUPLE ACCESS
###########################################
(print "\n=== TUPLE ACCESS ===")

# Accessing elements by index (zero-based)
(print "First element of numbers_tuple:" (nth numbers_tuple 0))
(print "Third element of numbers_tuple:" (nth numbers_tuple 2))
(print "First element of nested_tuple:" (nth nested_tuple 0))
(print "Second element of nested_tuple (which is another tuple):" (nth nested_tuple 1))

# Accessing nested elements
(print "First element of the second element in nested_tuple:" 
       (nth (nth nested_tuple 1) 0))

# Getting tuple length
(print "Length of empty_tuple:" (len empty_tuple))
(print "Length of numbers_tuple:" (len numbers_tuple))
(print "Length of nested_tuple:" (len nested_tuple))

###########################################
# SECTION 3: TUPLE COMPARISONS
###########################################
(print "\n=== TUPLE COMPARISON ===")

# Equality comparison
(= tuple1 (1, 2, 3))
(= tuple2 (1, 2, 3))
(= tuple3 (4, 5, 6))
(print "tuple1 == tuple2:" (eq? tuple1 tuple2))  # Should be True
(print "tuple1 == tuple3:" (eq? tuple1 tuple3))  # Should be False

# Ordering comparisons
(print "tuple1 < tuple3:" (< tuple1 tuple3))     # Should be True (compares elements)
(print "tuple3 > tuple1:" (> tuple3 tuple1))     # Should be True

# Comparison with different length tuples
(= tuple4 (1, 2))
(= tuple5 (1, 2, 3, 4))
(print "tuple4 < tuple1:" (< tuple4 tuple1))     # Should be True (shorter tuple)
(print "tuple5 > tuple1:" (> tuple5 tuple1))     # Should be True (longer tuple)

###########################################
# SECTION 4: TUPLE EXPRESSIONS
###########################################
(print "\n=== TUPLE EXPRESSIONS ===")

# Tuple with calculated elements
(= calculated_tuple ((+ 1 2), (* 3 4), (/ 10 2)))
(print "Tuple with calculated elements:" calculated_tuple)

# Tuple with mixed expressions
(= mixed_expr_tuple ((+ 1 2), "result", (* 5 (+ 2 3))))
(print "Tuple with mixed expressions:" mixed_expr_tuple)

###########################################
# SECTION 5: TUPLES AND FUNCTIONS
###########################################
(print "\n=== TUPLES AND FUNCTIONS ===")

# Function that returns a tuple
(= make_point (lambda (x y) (x, y)))
(print "Point (3,4):" (make_point 3 4))

# Function that accepts and returns a tuple
(= swap_coordinates (lambda (point) 
                     ((nth point 1), (nth point 0))))

(= point (make_point 5 10))
(print "Original point:" point)
(print "Swapped point:" (swap_coordinates point))

# Create a tuple with a function
(= make_tuple (lambda (a b c) (a, b, c)))
(print "Tuple from function:" (make_tuple 10 20 30))

###########################################
# SECTION 6: TUPLE UNPACKING (COMMENTED OUT)
###########################################
# Note: This is commented out as it may not be implemented
# in the current version of the language
#
# (print "\n=== TUPLE UNPACKING ===")
# (= a, b, c (1, 2, 3))
# (print "a:" a)
# (print "b:" b)
# (print "c:" c)

###########################################
# SECTION 7: PRACTICAL TUPLE USAGE
###########################################
(print "\n=== PRACTICAL TUPLE USAGE ===")

# Using tuples for coordinates
(= points ((0, 0), (1, 2), (3, 4), (5, 6)))
(print "List of points:" points)

# Function to calculate distance between two points
(= distance (lambda (p1 p2)
              (let ((x1 (nth p1 0))
                    (y1 (nth p1 1))
                    (x2 (nth p2 0))
                    (y2 (nth p2 1)))
                (sqrt (+ (** (- x2 x1) 2) 
                        (** (- y2 y1) 2))))))

(print "Distance between (0,0) and (3,4):" 
       (distance (nth points 0) (nth points 2)))

# Using tuples for fixed-size records
(= person ("John", "Doe", 30))
(print "Person record:" person)
(print "Person's first name:" (nth person 0))
(print "Person's last name:" (nth person 1))
(print "Person's age:" (nth person 2))

# Using tuples for multiple return values
(= divide_with_remainder (lambda (a b)
                          (let ((quotient (// a b))
                                (remainder (% a b)))
                            (quotient, remainder))))

(= division_result (divide_with_remainder 17 5))
(print "Division 17รท5 result (quotient, remainder):" division_result)
(print "Quotient:" (nth division_result 0))
(print "Remainder:" (nth division_result 1))