# 02_list_comprehension.m28
# Demonstrates list comprehension in m28
# Shows basic and advanced patterns for concise list creation

#######################################
# 1. Basic List Comprehension
#######################################

(print "\n=== Basic List Comprehension ===")

# Create a simple list
(= numbers [1 2 3 4 5])
(print "Original list:" numbers)

# Basic identity comprehension (returns the same values)
(= same [x for x numbers])
(print "Identity comprehension [x for x numbers]:" same)

# Square each number
(= squares [(* x x) for x numbers])
(print "Squares [(* x x) for x numbers]:" squares)

# Double each number
(= doubled [(* 2 x) for x numbers])
(print "Doubled [(* 2 x) for x numbers]:" doubled)

# More complex expressions
(= complex_expr [(+ (* x 2) 1) for x numbers])
(print "Complex expression [(+ (* x 2) 1) for x numbers]:" complex_expr)

#######################################
# 2. Comprehension with Filtering
#######################################

(print "\n=== Comprehension with Filtering ===")

(= numbers [0 1 2 3 4 5 6 7 8 9])
(print "Number list:" numbers)

# Filter for even numbers
(= evens [x for x numbers if (eq? (% x 2) 0)])
(print "Even numbers [x for x numbers if (eq? (% x 2) 0)]:" evens)

# Filter for odd numbers
(= odds [x for x numbers if (eq? (% x 2) 1)])
(print "Odd numbers [x for x numbers if (eq? (% x 2) 1)]:" odds)

# Filter and transform: squares of even numbers
(= even_squares [(* x x) for x numbers if (eq? (% x 2) 0)])
(print "Squares of even numbers [(* x x) for x numbers if (eq? (% x 2) 0)]:" even_squares)

# Multiple conditions with and
(= filtered [x for x numbers if (and (> x 3) (< x 8))])
(print "Numbers between 3 and 8 [x for x numbers if (and (> x 3) (< x 8))]:" filtered)

#######################################
# 3. Using Outside Variables
#######################################

(print "\n=== Using Outside Variables ===")

# Using an outside variable in the expression
(= multiplier 10)
(= scaled [(* x multiplier) for x [1 2 3 4 5]])
(print "Using outside variable (multiplier =" multiplier"):")
(print "[(* x multiplier) for x [1 2 3 4 5]]:" scaled)

# Using outside variable in the filter condition
(= threshold 5)
(= above_threshold [x for x numbers if (> x threshold)])
(print "Numbers above threshold" threshold":")
(print "[x for x numbers if (> x threshold)]:" above_threshold)

#######################################
# 4. Working with Characters and Strings
#######################################

(print "\n=== Working with Characters and Strings ===")

# Convert string to list of characters
(= greeting "Hello!")
(= chars [c for c greeting])
(print "String to character list:")
(print "String:" greeting)
(print "[c for c greeting]:" chars)

# Filter for vowels
(= vowels [c for c greeting if (in? c "aeiouAEIOU")])
(print "Vowels in string:" vowels)

#######################################
# 5. Nested Structures
#######################################

(print "\n=== Working with Nested Structures ===")

# Working with a matrix
(= matrix [[1 2 3] [4 5 6] [7 8 9]])
(print "Matrix:" matrix)

# Flattening a matrix using nested loops
(= flattened [])
(for row matrix
  (for x row
    (= flattened (+ flattened [x]))))
(print "Flattened matrix (using loops):" flattened)

# Advanced: Get all even numbers from the matrix
(= even_from_matrix [x for row matrix for x row if (eq? (% x 2) 0)])
(print "Even numbers from matrix:" even_from_matrix)