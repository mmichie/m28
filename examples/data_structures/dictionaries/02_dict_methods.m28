# 02_dict_methods.m28
#
# This example demonstrates common dictionary methods in M28:
# - keys, values, and items methods
# - update method for combining dictionaries
# - pop and clear methods for removing items
# - copy method for creating dictionary copies
# - setdefault for setting values only if key is missing

(print "=== Dictionary Methods and Operations ===")

#-----------------------------------------
# Create Sample Dictionaries
#-----------------------------------------
(print "\n--- Sample Dictionaries ---")

(def user (dict 
  "username" "jsmith" 
  "email" "jsmith@example.com"
  "active" true))

(print "User dictionary:" user)

(def settings (dict
  "theme" "dark"
  "notifications" true))

(print "Settings dictionary:" settings)

#-----------------------------------------
# Dictionary Information Methods
#-----------------------------------------
(print "\n--- Dictionary Information Methods ---")

# Get all keys from a dictionary
(print "Keys in user dict:" (dict.keys user))

# Get all values from a dictionary
(print "Values in user dict:" (dict.values user))

# Get all key-value pairs as tuples
(print "Items in user dict:" (dict.items user))

# Check dictionary type
(print "Type of user:" (type user))

#-----------------------------------------
# Modifying Dictionaries
#-----------------------------------------
(print "\n--- Modifying Dictionaries ---")

# Update dictionary with another dictionary
(dict.update user (dict "active" false "last_login" "2024-05-09"))
(print "User after update:" user)

# Set default value (only if key doesn't exist)
(= port (dict.setdefault settings "port" 8080))
(print "Settings after setdefault:" settings)
(print "Value returned from setdefault:" port)

# Try setdefault on an existing key (won't change the value)
(= theme (dict.setdefault settings "theme" "light"))
(print "Theme after setdefault:" theme)  # Will still be "dark"

#-----------------------------------------
# Removing Items
#-----------------------------------------
(print "\n--- Removing Items ---")

# Remove a key and get its value
(= removed_email (dict.pop user "email"))
(print "Removed email value:" removed_email)
(print "User after removing email:" user)

# Try to pop with default for missing key
(= removed_phone (dict.pop user "phone" "None"))
(print "Result of popping missing key:" removed_phone)

# Clear all items from a dictionary
(def temp_dict (dict "a" 1 "b" 2))
(print "Temp dict before clear:" temp_dict)
(dict.clear temp_dict)
(print "Temp dict after clear:" temp_dict)

#-----------------------------------------
# Copying Dictionaries
#-----------------------------------------
(print "\n--- Copying Dictionaries ---")

# Create a copy of a dictionary
(= settings_copy (dict.copy settings))
(print "Original settings:" settings)
(print "Copy of settings:" settings_copy)

# Modify the copy to demonstrate they are separate
(dict.set settings_copy "theme" "light")
(print "Original settings after changing copy:" settings)
(print "Modified copy:" settings_copy)

#-----------------------------------------
# Helper Functions
#-----------------------------------------
(print "\n--- Creating Helper Functions ---")

# Create a simple helper function for safe dictionary access
(def (safe_get d key default)
  (if (dict.contains? d key)
      (dict.get d key)
      default))

(print "Using safe_get on username:" (safe_get user "username" "unknown"))
(print "Using safe_get on missing key:" (safe_get user "missing" "not found"))

(print "\n=== Dictionary Methods Example Complete ===")