# Exception Handling in M28

# Basic try-except
(print "Basic exception handling:")
(try
  (= result (/ 10 0))
  (print "This won't print")
  (except
    (print "Cannot divide by zero!")))

# Try with finally
(print "\nTry with finally:")
(try
  (print "In try block")
  (= result (/ 100 5))
  (print f"Result: {result}")
  (finally
    (print "Finally block always executes")))

# Exception and finally together
(print "\nException with finally:")
(try
  (print "About to raise an error")
  (raise "Something went wrong")
  (print "This won't print")
  (except
    (print "Exception caught"))
  (finally
    (print "Cleanup performed")))

# Raising exceptions
(print "\nRaising custom exceptions:")
(def validate_age (age)
  (if (< age 0)
      (raise "Age cannot be negative")
      elif (> age 150)
      (raise "Age seems unrealistic")
      else
      age))

(for test_age [25, -5, 200]
  (try
    (= valid_age (validate_age test_age))
    (print f"Valid age: {valid_age}")
    (except
      (print f"Invalid age: {test_age}"))))

# Simple bank account with error handling
(print "\nBank account example:")
(class BankAccount
  (def __init__ (self balance)
    (= self.balance balance))
  
  (def withdraw (self amount)
    (if (> amount self.balance)
        (raise f"Insufficient funds: need {amount}, have {self.balance}"))
    (= self.balance (- self.balance amount))
    self.balance))

(= account (BankAccount 100))
(try
  (account.withdraw 50)
  (print f"Withdrawal successful, balance: {account.balance}")
  (account.withdraw 75)  # This will fail
  (except
    (print "Insufficient funds for withdrawal")))

# Nested function calls with error handling
(print "\nNested function error handling:")
(def risky_operation (x)
  (if (== x 0)
      (/ 1 0)  # Will cause error
      elif (< x 0)
      (raise "Negative value not allowed")
      else
      (* x 2)))

(def process_value (x)
  (print f"Processing {x}...")
  (risky_operation x))

(for value [5, 0, -3]
  (try
    (= result (process_value value))
    (print f"Result: {result}")
    (except
      (print f"Failed to process {value}"))))

# Function with error handling
(print "\nFunction with internal error handling:")
(def safe_divide (a b)
  (try
    (/ a b)
    (except
      (print f"Cannot divide {a} by {b}")
      nil)))

(print f"10 / 2 = {(safe_divide 10 2)}")
(print f"10 / 0 = {(safe_divide 10 0)}")

# Multiple operations with shared error handling
(print "\nMultiple operations:")
(def process_data (data)
  (try
    (print f"Processing {data}...")
    (if (== data "bad")
        (raise "Bad data"))
    (print "Processing complete")
    (return f"Processed: {data}")
    (except
      (print "Error during processing")
      (return nil))))

(for data ["good", "bad", "ok"]
  (= result (process_data data))
  (if result
      (print f"Success: {result}")
      (print "Processing failed")))

# Assertions
(print "\nAssertions:")
(def divide (a b)
  (assert (!= b 0) "Divisor cannot be zero")
  (/ a b))

(print f"10 / 2 = {(divide 10 2)}")
(try
  (divide 10 0)
  (except
    (print "Assertion failed: Cannot divide by zero")))

# Error propagation
(print "\nError propagation:")
(def level3 ()
  (print "  Level 3: raising error")
  (raise "Error from level 3"))

(def level2 ()
  (print " Level 2: calling level 3")
  (level3))

(def level1 ()
  (print "Level 1: calling level 2")
  (level2))

(try
  (level1)
  (except
    (print "Error caught at top level")))

(print "\n===== Exception Examples Complete =====")