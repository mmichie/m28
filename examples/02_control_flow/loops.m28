# Loops in M28

# Basic for loop over a list
(print "Basic for loop:")
(for item in [1, 2, 3, 4, 5]
  (print item))

# For loop with range
(print "\nFor loop with range:")
(for i in (range 5)
  (print f"Index: {i}"))

# For loop with start and stop
(print "\nRange with start and stop:")
(for i in (range 5 10)
  (print i))

# For loop with step
(print "\nRange with step:")
(for i in (range 0 10 2)
  (print i))

# Iterating over strings
(print "\nIterating over string:")
(for char in "Hello"
  (print char))

# Iterating over dictionary keys
(= person {"name": "Alice", "age": 30, "city": "NYC"})
(print "\nDictionary keys:")
(for key in (keys person)
  (print f"{key}: {person.key}"))

# Iterating over dictionary items
(print "\nDictionary items:")
(for (k, v) in (items person)
  (print f"{k} => {v}"))

# Using enumerate
(= fruits ["apple", "banana", "orange"])
(print "\nEnumerate:")
(for (index, fruit) in (enumerate fruits)
  (print f"{index}: {fruit}"))

# While loop
(print "\nWhile loop:")
(= count 0)
(while (< count 5)
  (print f"Count: {count}")
  (= count (+ count 1)))

# While loop with break
(print "\nWhile with break:")
(= x 0)
(while True
  (if (>= x 5)
      (break))
  (print x)
  (= x (+ x 1)))

# For loop with continue
(print "\nFor with continue (skip even numbers):")
(for i in (range 10)
  (if (== (% i 2) 0)
      (continue))
  (print i))

# Nested loops
(print "\nNested loops (multiplication table):")
(for i in (range 1 4)
  (for j in (range 1 4)
    (print f"{i} Ã— {j} = {(* i j)}")))

# List comprehension (loop expression)
(= squares [x**2 for x in (range 10)])
(print "\nSquares using comprehension:" squares)

# Filtered comprehension
(= even_squares [x**2 for x in (range 10) if (== (% x 2) 0)])
(print "Even squares:" even_squares)

# While loop for user input simulation
(print "\nSimulated number guessing:")
(= target 7)
(= guesses [3, 5, 8, 7])
(= index 0)

(while (< index (len guesses))
  (= guess guesses.index)
  (print f"Guess: {guess}")
  
  (if (== guess target)
      (do
        (print "Correct!")
        (break))
      (elif (< guess target)
        (print "Too low")
        (print "Too high")))
  
  (= index (+ index 1)))

# Loop with else (when no break occurs)
(print "\nSearching in list:")
(= numbers [1, 3, 5, 7, 9])
(= search_for 6)
(= found False)

(for num in numbers
  (if (== num search_for)
      (do
        (print f"Found {search_for}")
        (= found True)
        (break))))

(if (not found)
    (print f"{search_for} not found"))

# Practical example: Fibonacci sequence
(print "\nFibonacci sequence:")
(= n 10)
(= fib_nums [])
(= a 0)
(= b 1)

(while (< (len fib_nums) n)
  (append fib_nums a)
  (= temp (+ a b))
  (= a b)
  (= b temp))

(print f"First {n} Fibonacci numbers: {fib_nums}")

# Loop with accumulator pattern
(print "\nSum and product using loops:")
(= numbers [1, 2, 3, 4, 5])
(= sum 0)
(= product 1)

(for num in numbers
  (= sum (+ sum num))
  (= product (* product num)))

(print f"Sum: {sum}")
(print f"Product: {product}")

# zip for parallel iteration
(= names ["Alice", "Bob", "Charlie"])
(= ages [25, 30, 35])
(print "\nParallel iteration with zip:")
(for (name, age) in (zip names ages)
  (print f"{name} is {age} years old"))