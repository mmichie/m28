# Instead of using the class syntax, let's implement a class factory
# This will help us understand how the class syntax should be implemented

# Define a function that creates counter instances
(def (make-Counter initial-count)
  # Store instance state in lexical variables
  (= count initial-count)
  
  # Define method implementations
  (def (get-count)
    count)
  
  (def (increment)
    (= count (+ count 1))
    count)
  
  # Create dictionary to store methods
  (= counter-obj (dict))
  (= counter-obj 
    (dict
      "get-count" get-count
      "increment" increment))
      
  # Return the object
  counter-obj)

# Create a counter
(= counter (make-Counter 5))
(print "Counter object:" counter)

# Call methods
(print "Initial count:" ((get counter "get-count")))
(print "After increment:" ((get counter "increment")))
(print "After another increment:" ((get counter "increment")))

# Rename our factory to match a class name
(= Counter make-Counter)

# Create a counter using the class-style name
(= counter2 (Counter 10))
(print "Counter2 initial count:" ((get counter2 "get-count")))
(print "Counter2 after increment:" ((get counter2 "increment")))