# Debug module imports
(print "=== Debugging Module Import System ===")

# Import the simple module
(print "Importing simple_module...")
(import "modules/simple_module")

# Debug the module
(print "\nDebugging simple_module:")
(debug_module "simple_module")

# Create a new module in the environment
(print "\nCreating a new module in the environment...")
(= test_module (dict
  "name" "Test Module"
  "version" "1.0"
  "author" "Debug System"
  "function" (lambda (x) (+ x x))
))

# Debug the manually created module
(print "\nDebugging manually created module:")
(debug_module "test_module")

# Test accessing the module
(print "\nAccessing manually created module:")
(print "Module name:" (get test_module "name"))
(print "Module version:" (get test_module "version"))

# Skip running the function since it needs builtin access

# Import another module and debug it
(print "\nImporting dict_module...")
(import "modules/dict_module")
(debug_module "dict_module")