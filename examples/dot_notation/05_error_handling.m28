# Dot Notation Error Handling
# This example demonstrates error handling with dot notation

(print "=== Dot Notation Error Handling ===")

# Create a simple object
(= obj {"name": "Test", "value": 42})
(print "Object created:" obj)

# 1. Handling nil values
(print "\n-- Nil Values --")
(= empty-obj nil)

(try
  (= will-fail (. empty-obj "anything"))
  (catch e
    (print "Nil access error:" e)))

# 2. Handling missing properties
(print "\n-- Missing Properties --")
(try
  (= missing (. obj "nonexistent"))
  (catch e
    (print "Error accessing missing property:" e)))

# 3. Handling type errors
(print "\n-- Type Errors --")
(= num 42)
(try
  (= will-fail (. num "property"))
  (catch e
    (print "Type error:" e)))

# 4. Nested access errors
(print "\n-- Nested Access Errors --")
(try
  (= nested-fail (dot obj "missing" "nested" "property"))
  (catch e
    (print "Nested access error:" e)))

# 5. Safe property access with defaults
(print "\n-- Safe Property Access --")

(def (safe-get obj prop default)
  (try
    (= value (. obj prop))
    (catch e
      (= value default)))
  (return value))

(= safe-name (safe-get obj "name" "Default Name"))
(print "Safe name access:" safe-name)

(= safe-missing (safe-get obj "missing" "Not Found"))
(print "Safe missing access:" safe-missing)

(= safe-from-nil (safe-get nil "anything" "Default from nil"))
(print "Safe nil access:" safe-from-nil)

(print "\n=== Error Handling Complete ===")