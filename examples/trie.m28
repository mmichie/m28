# Trie implementation in M28
# A prefix tree data structure for efficient string operations

# Create a new trie node with a given value
(def (make-trie-node value)
  (dict 
    "value" value
    "children" (dict)
    "is_end_of_word" False))

# Create a new trie with an empty root node
(def (make-trie)
  (make-trie-node None))

# Insert a word into the trie
(def (trie-insert trie word)
  # Start at the root
  (= current trie)
  
  # Traverse the trie character by character
  (for (i (range (len word)))
    (= char (nth word i))
    (= children (get current "children"))
    
    # Check if the current character exists in children
    (= child (get children char None))
    
    # If not, create a new node for this character
    (if (= child None)
      (begin
        (= child (make-trie-node char))
        # Add the new node to children
        (= children (dict (+ (dict.items children) [[char, child]])))
        (= current (dict 
          "value" (get current "value")
          "children" children
          "is_end_of_word" (get current "is_end_of_word")))
      ))
    
    # Move to the child node
    (= current child))
  
  # Mark the current node as the end of a word
  (= current (dict
    "value" (get current "value")
    "children" (get current "children")
    "is_end_of_word" True))
  
  trie)

# Search for a word in the trie
(def (trie-search trie word)
  # Start at the root
  (= current trie)
  
  # Traverse the trie character by character
  (for (i (range (len word)))
    (= char (nth word i))
    (= children (get current "children"))
    (= current (get children char None))
    
    # If character not found, word doesn't exist
    (if (= current None)
      (return False)))
  
  # Check if this is a complete word
  (get current "is_end_of_word"))

# Check if any word in the trie starts with the given prefix
(def (trie-starts-with trie prefix)
  # Start at the root
  (= current trie)
  
  # Traverse the trie character by character
  (for (i (range (len prefix)))
    (= char (nth prefix i))
    (= children (get current "children"))
    (= current (get children char None))
    
    # If character not found, prefix doesn't exist
    (if (= current None)
      (return False)))
  
  # Reached the end of prefix
  True)

# Test the trie implementation
(= my-trie (make-trie))
(= my-trie (trie-insert my-trie "hello"))
(= my-trie (trie-insert my-trie "hell"))
(= my-trie (trie-insert my-trie "heaven"))
(= my-trie (trie-insert my-trie "hi"))

(print "==== Trie Test ====")
(print "Search for 'hello':" (trie-search my-trie "hello"))
(print "Search for 'hell':" (trie-search my-trie "hell"))
(print "Search for 'help':" (trie-search my-trie "help"))
(print "Search for 'hi':" (trie-search my-trie "hi"))

(print "\nPrefix tests:")
(print "Words starting with 'h':" (trie-starts-with my-trie "h"))
(print "Words starting with 'he':" (trie-starts-with my-trie "he"))
(print "Words starting with 'hel':" (trie-starts-with my-trie "hel"))
(print "Words starting with 'hex':" (trie-starts-with my-trie "hex"))

(print "\nAdding more words...")
(= my-trie (trie-insert my-trie "world"))
(= my-trie (trie-insert my-trie "work"))
(= my-trie (trie-insert my-trie "word"))

(print "Search for 'world':" (trie-search my-trie "world"))
(print "Search for 'work':" (trie-search my-trie "work"))
(print "Search for 'worm':" (trie-search my-trie "worm"))
(print "Words starting with 'wo':" (trie-starts-with my-trie "wo"))