# Safe File Operations in M28
# Uses /tmp for all file creation to avoid polluting the project directory

(import os)
(import pathlib)

(print "=== SAFE FILE OPERATIONS TEST ===\n")

# File existence and properties (read-only on existing files)
(def file_info (filepath)
  (if (os.path.exists filepath)
    (begin
      (print f"File: {filepath}")
      (print f"Size: {(os.path.getsize filepath)} bytes")
      (print f"Exists: {(os.path.exists filepath)}"))
    (print f"File does not exist: {filepath}")))

(file_info "README.md")

# Working with paths
(= current_dir (os.getcwd))
(print f"\nCurrent directory: {current_dir}")

# Path manipulation with pathlib
(if (os.path.exists "README.md")
  (begin
    (= path (pathlib.Path "README.md"))
    (print f"\nPath info:")
    (print f"Name: {path.name}")
    (print f"Stem: {path.stem}")
    (print f"Suffix: {path.suffix}")
    (print f"Parent: {path.parent}")))

# Use /tmp for all file creation
(= test_dir "/tmp/m28_filetest")

# Create test directory in /tmp
(def create_test_dir ()
  (try
    (if (not (os.path.exists test_dir))
      (do
        (os.makedirs test_dir)
        (print f"\nCreated test directory: {test_dir}"))
      (print f"\nTest directory already exists: {test_dir}"))
    (except Exception e
      (print f"Error creating directory: {e}"))))

(create_test_dir)

# Test file operations in /tmp
(= test_file (os.path.join test_dir "test.txt"))
(print f"\nCreating test file: {test_file}")

# Write test (in /tmp only)
(try
  (= f (open test_file "w"))
  (f.write "Hello from M28!\n")
  (f.write "This is a test file.\n")
  (f.close)
  (print f"File size: {(os.path.getsize test_file)} bytes")
  (except Exception e
    (print f"Error writing file: {e}")))

# Read test
(try
  (= f (open test_file "r"))
  (= content (f.read))
  (f.close)
  (print f"Contents: {content}")
  (except Exception e
    (print f"Error reading file: {e}")))

# Clean up (delete test files and directory)
(print "\nCleaning up...")
(try
  (if (os.path.exists test_file)
    (do
      (os.remove test_file)
      (print f"Deleted: {test_file}")))
  (if (os.path.exists test_dir)
    (do
      (os.rmdir test_dir)
      (print f"Deleted: {test_dir}")))
  (except Exception e
    (print f"Error during cleanup: {e}")))

(print "\n=== TEST COMPLETE ===")
