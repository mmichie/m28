# Dictionary Tutorial for M28
# A comprehensive guide to using dictionaries

#####################################################
# 1. Creating Dictionaries - The Basics
#####################################################

(print "\n=== 1. Creating Dictionaries ===")
(print "Different ways to create and initialize dictionaries")

# Empty dictionary
(= empty_dict (dict))
(print "Empty dictionary:" empty_dict)

# Dictionary with initial key-value pairs
(= person (dict "name" "John" "age" 30 "city" "New York"))
(print "Person dictionary:" person)

# Dictionary with different value types
(= mixed (dict 
  "integer" 42
  "float" 3.14
  "string" "Hello"
  "boolean" True
  "null" None
  "list" [1, 2, 3]))
(print "Mixed-type dictionary:" mixed)

# Dictionary using dict function (preferred way)
(= config (dict
  "host" "localhost"
  "port" 8080
  "debug" True
))
(print "Dictionary using dict function:" config)

#####################################################
# 2. Accessing Dictionary Values
#####################################################

(print "\n=== 2. Accessing Dictionary Values ===")
(print "Ways to retrieve values from dictionaries")

# Create a sample dictionary
(= user (dict "username" "jsmith" "email" "jsmith@example.com" "active" True))

# Basic access with get
(print "Username:" (get user "username"))
(print "Email:" (get user "email"))
(print "Active status:" (get user "active"))

# Get with default value for missing keys
(print "Role (with default):" (get user "role" "User"))
(print "Last login (with default):" (get user "last_login" "Never"))

# Check dictionary size
(print "Number of keys in user dict:" (len user))

#####################################################
# 3. Modifying Dictionaries
#####################################################

(print "\n=== 3. Modifying Dictionaries ===")
(print "Ways to change dictionary contents")

# Start with an initial dictionary
(= student (dict "name" "Alice" "grade" "A"))
(print "Initial student:" student)

# Add new key-value pair by recreating the dictionary
(= student (dict "name" "Alice" "grade" "A" "score" 95))
(print "After adding score:" student)

# Update an existing value by recreating the dictionary
(= student (dict "name" "Alice" "grade" "A+" "score" 95))
(print "After updating grade:" student)

# Remove a key by recreating without it
(= student (dict "name" "Alice" "grade" "A+"))
(print "After removing score:" student)

#####################################################
# 4. Nested Dictionaries
#####################################################

(print "\n=== 4. Nested Dictionaries ===")
(print "Working with dictionaries inside dictionaries")

# Create a nested dictionary structure
(= company (dict
  "name" "Acme Corp"
  "headquarters" (dict
    "city" "San Francisco"
    "state" "CA"
    "country" "USA")
  "departments" (dict
    "engineering" (dict "employees" 200 "manager" "Jane")
    "marketing" (dict "employees" 50 "manager" "Bob")
    "hr" (dict "employees" 20 "manager" "Alice"))))

# Access top-level attributes
(print "Company name:" (get company "name"))

# Access nested attributes
(print "HQ City:" (get (get company "headquarters") "city"))
(print "Engineering manager:" (get (get company "departments") "engineering"))
(print "Engineering employees:" 
  (get (get (get company "departments") "engineering") "employees"))

# Build a nested dictionary incrementally
(= settings (dict
  "app" "MyApp"
  "version" "1.0"))
(print "Initial settings:" settings)

(= database_settings (dict "host" "localhost" "port" 5432))
(= settings (dict 
  "app" "MyApp"
  "version" "1.0"
  "database" database_settings))
(print "Settings with database:" settings)

#####################################################
# 5. Dictionary Operations and Use Cases
#####################################################

(print "\n=== 5. Dictionary Operations and Use Cases ===")
(print "Common patterns and techniques with dictionaries")

# Using dictionaries for lookup tables
(= color_codes (dict
  "red" "#FF0000"
  "green" "#00FF00"
  "blue" "#0000FF"))
(print "Color lookup - red:" (get color_codes "red"))

# Dictionaries as records
(= employee (dict
  "id" "E12345"
  "name" "Sarah Johnson"
  "department" "Engineering"
  "salary" 85000))
(print "Employee record:" employee)

# Dictionary for function options/parameters
(def (format-name first last options)
  (= title (get options "title" ""))
  (= suffix (get options "suffix" ""))
  (= middle (get options "middle" ""))
  
  (= formatted_name "")
  (if (not (= title ""))
      (= formatted_name (+ formatted_name title " ")))
  
  (= formatted_name (+ formatted_name first " "))
  
  (if (not (= middle ""))
      (= formatted_name (+ formatted_name middle " ")))
  
  (= formatted_name (+ formatted_name last))
  
  (if (not (= suffix ""))
      (= formatted_name (+ formatted_name ", " suffix)))
  
  formatted_name)

# Test the function with different option dictionaries
(print "Formatted name 1:" 
  (format-name "John" "Smith" (dict "title" "Mr.")))

(print "Formatted name 2:"
  (format-name "Jane" "Doe" (dict "title" "Dr." "suffix" "PhD")))

(print "Formatted name 3:"
  (format-name "Robert" "Johnson" (dict "middle" "J.")))

# Using a dictionary to create a simple cache
(= fibonacci_cache (dict "0" 0 "1" 1))

(def (fibonacci n)
  # Check if the result is in the cache
  (= n_str (str n))
  (= cached_result (get fibonacci_cache n_str None))
  
  (if (not (= cached_result None))
      # Return the cached result if available
      cached_result
      # Otherwise calculate, cache, and return the result
      (begin
        (= result (+ (fibonacci (- n 1)) (fibonacci (- n 2))))
        (= fibonacci_cache (dict n_str result))
        result)))

(print "Calculating fibonacci numbers with caching:")
(print "fibonacci(5):" (fibonacci 5))
(print "fibonacci(7):" (fibonacci 7))

(print "\n=== Dictionary Tutorial Complete ===")