# Binary Search implementation in M28
# Binary search is a efficient algorithm for finding an element in a sorted array

# Binary search function
(def (binary-search lst target)
  # Initialize boundaries
  (= left 0)
  (= right (- (len lst) 1))
  (= found False)
  (= index -1)
  
  # Search while boundaries are valid
  (while (and (<= left right) (not found))
    # Calculate the middle index
    (= mid (/ (+ left right) 2))
    (= mid (int mid)) # Make sure mid is an integer
    
    # Get the middle value
    (= mid-value (nth lst mid))
    
    # Check if we found the target
    (if (== mid-value target)
      (begin
        (= found True)
        (= index mid))
      
      # If not found, adjust the boundaries
      (if (< mid-value target)
        # Target is in the right half
        (= left (+ mid 1))
        # Target is in the left half
        (= right (- mid 1)))))
  
  # Return the index (-1 if not found)
  index)

# Helper function to convert floating point to integer
(def (int n)
  (- n (% n 1)))

# Test the binary search algorithm
(= sorted-list [1 2 3 5 7 9 10 15 20 27 33 45 60])
(print "Sorted list:")
(print sorted-list)

# Test with various targets
(print "\nSearching for elements:")
(print "Search for 5 - Index:" (binary-search sorted-list 5))
(print "Search for 1 - Index:" (binary-search sorted-list 1))
(print "Search for 60 - Index:" (binary-search sorted-list 60))
(print "Search for 27 - Index:" (binary-search sorted-list 27))
(print "Search for 100 - Index:" (binary-search sorted-list 100)) # Not in list

# Edge cases
(print "\nEdge cases:")
(print "Empty list - Search for 5:" (binary-search [] 5))
(print "Single element list - Search for 42:" (binary-search [42] 42))
(print "Single element list - Search for 99:" (binary-search [42] 99))