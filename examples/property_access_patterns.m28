# Property Access Patterns in M28
# This example demonstrates various patterns for accessing object properties

# 1. Basic Class Definition
(class Person ()
  # Constructor
  (def (init self name age)
    # Store attributes using dict.set
    (dict.set self "name" name)
    (dict.set self "age" age)
    (print "Created person:" name ", age" age))
  
  # Method to have a birthday
  (def (birthday self)
    # Use dict.get to retrieve the current age
    (def current-age (dict.get self "age"))
    # Use dict.set to update the age
    (dict.set self "age" (+ current-age 1))
    (print "Happy Birthday!" (dict.get self "name") 
           "is now" (dict.get self "age") "years old"))
  
  # Method to introduce yourself
  (def (introduce self)
    (print "Hi, I'm" (dict.get self "name") "and I'm" 
           (dict.get self "age") "years old"))
)

# 2. Helper Functions for Cleaner Property Access
(def (get-prop obj name)
  (dict.get obj name))

(def (set-prop obj name value)
  (dict.set obj name value)
  value)

# 3. Create Objects
(print "\n=== Creating Objects ===")
(def alice (Person "Alice" 30))
(def bob (Person "Bob" 25))

# 4. Direct Property Access with dict.get/dict.set
(print "\n=== Direct Property Access ===")
(print "Alice's name:" (dict.get alice "name"))
(print "Alice's age:" (dict.get alice "age"))
(print "Bob's name:" (dict.get bob "name"))
(print "Bob's age:" (dict.get bob "age"))

# 5. Property Access with Helper Functions
(print "\n=== Helper Function Access ===")
(print "Alice's name:" (get-prop alice "name"))
(print "Alice's age:" (get-prop alice "age"))

# 6. Modifying Properties
(print "\n=== Property Modification ===")
(print "Changing Alice's name...")
(dict.set alice "name" "Alicia")
(print "New name:" (dict.get alice "name"))
(print "Using helper to change age...")
(set-prop alice "age" 31)
(print "New age:" (get-prop alice "age"))

# 7. Calling Methods That Use Properties
(print "\n=== Method Calls ===")
(print "Bob's introduction:")
((dict.get bob "introduce") bob)
(print "Bob's birthday:")
((dict.get bob "birthday") bob)
(print "Bob's updated introduction:")
((dict.get bob "introduce") bob)

# 8. Combining Patterns
(print "\n=== Combined Access Patterns ===")
(def enhanced-introduce 
  (lambda (person)
    (print "Enhanced introduction:")
    (print "Hello, my name is" (get-prop person "name"))
    (print "I am" (get-prop person "age") "years old")
    (print "Nice to meet you!")))

(enhanced-introduce alice)

# 9. Success Message
(print "\n=== Property Access Success ===")
(print "✅ Direct property access with dict.get and dict.set works well")
(print "✅ Helper functions provide a cleaner API for property access")
(print "✅ Methods can easily work with properties")
(print "✅ External functions can access object properties consistently")