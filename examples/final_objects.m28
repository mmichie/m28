# Final objects example
# Using dispatch with explicit arguments

# Person factory that creates people with properties and methods
(def (make-person name age)
  # Private person state
  (= person-name name)
  (= person-age age)
  (= birthdays 0)
  (= friends [])
  
  # Return a dispatch function
  (lambda (op arg)
    (if (== op "name")
      # Get name
      person-name
      
      (if (== op "age")
        # Get age
        person-age
        
        (if (== op "birthday")
          # Have a birthday
          (begin
            (= birthdays (+ birthdays 1))
            (= person-age (+ person-age 1))
            (+ person-name " is now " (str person-age) " years old!"))
          
          (if (== op "add-friend")
            # Add a friend
            (begin
              (= friends (+ friends [arg]))
              (+ person-name " is now friends with " arg "!"))
            
            (if (== op "friends")
              # List friends
              (if (== (len friends) 0)
                (+ person-name " has no friends yet.")
                (+ person-name "'s friends: " (str friends)))
              
              (if (== op "info")
                # Get full info
                (dict 
                  "name" person-name
                  "age" person-age
                  "birthdays" birthdays
                  "friends_count" (len friends)
                  "friends" friends)
                
                # Unknown operation
                (+ "Unknown operation: " op)))))))))

# Create people
(= alice (make-person "Alice" 30))
(= bob (make-person "Bob" 25))

# Test basic operations
(print "Alice's name: " (alice "name" nil))
(print "Alice's age: " (alice "age" nil))
(print "Bob's name: " (bob "name" nil))
(print "Bob's age: " (bob "age" nil))

# Celebrate birthdays
(print (alice "birthday" nil))
(print (alice "birthday" nil))
(print "Alice's age after birthdays: " (alice "age" nil))

# Add friends
(print (alice "add-friend" "Bob"))
(print (bob "add-friend" "Alice"))

# List friends
(print (alice "friends" nil))
(print (bob "friends" nil))

# Get info
(print "Alice's info: " (alice "info" nil))
(print "Bob's info: " (bob "info" nil))