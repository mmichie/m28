# Simple Calculator in M28
# A basic calculator demonstrating classes and methods

# Calculator class
(class Calculator
  (def __init__ (self)
    (= self.memory 0)
    (= self.last_result 0)
    (= self.history (list)))
  
  # Basic operations
  (def add (self a b)
    (= result (+ a b))
    (= self.last_result result)
    (= self.history (append self.history f"{a} + {b} = {result}"))
    result)
  
  (def subtract (self a b)
    (= result (- a b))
    (= self.last_result result)
    (= self.history (append self.history f"{a} - {b} = {result}"))
    result)
  
  (def multiply (self a b)
    (= result (* a b))
    (= self.last_result result)
    (= self.history (append self.history f"{a} * {b} = {result}"))
    result)
  
  (def divide (self a b)
    (if (== b 0)
      (raise "Division by zero"))
    (= result (/ a b))
    (= self.last_result result)
    (= self.history (append self.history f"{a} / {b} = {result}"))
    result)
  
  (def power (self base exponent)
    (= result (** base exponent))
    (= self.last_result result)
    (= self.history (append self.history f"{base}^{exponent} = {result}"))
    result)
  
  # Memory operations
  (def memory_store (self value)
    (= self.memory value)
    (print f"Stored {value} in memory"))
  
  (def memory_recall (self)
    self.memory)
  
  (def memory_add (self value)
    (= self.memory (+ self.memory value))
    (print f"Added {value} to memory (now {self.memory})"))
  
  (def memory_clear (self)
    (= self.memory 0)
    (print "Memory cleared"))
  
  # History
  (def show_history (self)
    (print "\nCalculation History:")
    (if (== (len self.history) 0)
      (print "  No calculations yet")
      (for entry self.history
        (print f"  {entry}"))))
  
  (def clear_history (self)
    (= self.history (list))
    (print "History cleared"))
  
  # Chain operations using last result
  (def add_to_last (self value)
    (self.add self.last_result value))
  
  (def multiply_last (self value)
    (self.multiply self.last_result value)))

# Demo usage
(print "======================")
(print "Calculator Demo")
(print "======================\n")

# Create calculator
(= calc (Calculator))

# Basic arithmetic
(print "Basic Operations:")
(print f"10 + 5 = {(calc.add 10 5)}")
(print f"20 - 8 = {(calc.subtract 20 8)}")
(print f"6 * 7 = {(calc.multiply 6 7)}")
(print f"15 / 3 = {(calc.divide 15 3)}")
(print f"2^8 = {(calc.power 2 8)}")

# Memory operations
(print "\nMemory Operations:")
(calc.memory_store 100)
(calc.memory_add 50)
(print f"Memory recall: {(calc.memory_recall)}")
(calc.memory_clear)

# Chain operations
(print "\nChain Operations:")
(print f"Last result: {calc.last_result}")
(print f"Add 10 to last: {(calc.add_to_last 10)}")
(print f"Multiply last by 2: {(calc.multiply_last 2)}")

# Error handling
(print "\nError Handling:")
(try
  (calc.divide 10 0)
  (except
    (print "Error: Cannot divide by zero")))

# Show calculation history
(calc.show_history)

# Advanced calculations
(print "\nAdvanced Calculations:")

# Calculate compound interest
# A = P(1 + r)^t
(def compound_interest (principal rate time)
  (= calc2 (Calculator))
  (= base (+ 1 rate))
  (= growth_factor (calc2.power base time))
  (calc2.multiply principal growth_factor))

(= principal 1000)
(= rate 0.05)  # 5% interest
(= time 10)    # 10 years
(= amount (compound_interest principal rate time))
(print f"${principal} at {(* rate 100)}% for {time} years = ${amount:.2f}")

# Calculate factorial
(def factorial (n)
  (= calc3 (Calculator))
  (= result 1)
  (for i (range 1 (+ n 1))
    (= result (calc3.multiply result i)))
  result)

(print f"5! = {(factorial 5)}")

# Pythagorean theorem
(def pythagorean (a b)
  (= calc4 (Calculator))
  (= a_squared (calc4.power a 2))
  (= b_squared (calc4.power b 2))
  (= c_squared (calc4.add a_squared b_squared))
  (sqrt c_squared))

(print f"Hypotenuse of 3-4-5 triangle: {(pythagorean 3 4)}")

(print "\n======================")
(print "Calculator Demo Complete!")
(print "======================")