# List Mutability Patterns in M28
# Demonstrating both mutable and immutable operations

(print "=== M28 List Mutability Patterns ===\n")

# Pattern 1: Immutable operations (functional style)
(print "1. Immutable Operations - Methods return new lists:")

(= original [1, 2, 3])
(print "  Original list:" original)

# These operations return new lists, original is unchanged
(= with_append (original.append 4))
(= with_extend (original.extend (list 5 6)))
(= with_insert (original.insert 1 "x"))
(= without_2 (original.remove 2))

(print "  After operations, original:" original)
(print "  append result:" with_append)
(print "  extend result:" with_extend)
(print "  insert result:" with_insert)
(print "  remove result:" without_2)

# Pattern 2: Update and reassign
(print "\n2. Update and Reassign Pattern:")

(= lst [1, 2, 3])
(print "  Starting with:" lst)
(= lst (lst.append 4))
(print "  After append 4:" lst)
(= lst (lst.extend (list 5 6)))
(print "  After extend [5, 6]:" lst)
(= lst (lst.insert 0 0))
(print "  After insert 0 at beginning:" lst)

# Pattern 3: Mutable operations (imperative style)
(print "\n3. Mutable Operations - Direct index assignment:")

(= data [10, 20, 30, 40, 50])
(print "  Original data:" data)

# Direct mutations
(= data[0] 15)
(= data[2] 35)
(= data[-1] 55)
(print "  After mutations:" data)

# Pattern 4: Building lists functionally
(print "\n4. Building Lists Functionally:")

(def build-squares (n)
  (= result [])
  (for i (range n)
    (result.append (* i i)))
  result)

(print "  Squares of 0-5:" (build-squares 6))

# Pattern 5: Functional pipeline
(print "\n5. Functional Pipeline:")

(= numbers (list (range 1 11)))
# Note: In current M28, use map/filter functions instead of methods
(= doubled (map (lambda (x) (* x 2)) numbers))
(= filtered (filter (lambda (x) (< x 15)) doubled))  
(= processed (map (lambda (x) (+ x 1)) filtered))
(print "  Pipeline result:" processed)

# Pattern 6: When to use mutation
(print "\n6. When Mutation is Appropriate:")

# Example: Swap elements (natural with mutation)
(def swap-elements (lst i j)
  (= temp lst[i])
  (= lst[i] lst[j])
  (= lst[j] temp)
  lst)

(= to_swap [1, 2, 3, 4, 5])
(print "  Before swap:" to_swap)
(swap-elements to_swap 1 3)
(print "  After swapping indices 1 and 3:" to_swap)

# Pattern 7: Mixing styles (not recommended, shown for education)
(print "\n7. Mixing Styles (Be Careful!):")

(def process-list (lst)
  # This function uses both styles - be clear about what it does!
  (= lst[0] 999)                    # Mutates the input!
  (= new_lst (lst.append 1000))     # Returns new list
  new_lst)                          # Returns new, but input was mutated

(= mixed [1, 2, 3])
(print "  Before process-list:" mixed)
(= result (process-list mixed))
(print "  After process-list:")
(print "    Original (was mutated!):" mixed)
(print "    Returned:" result)

# Best practices summary
(print "\n=== Best Practices ===")
(print "1. Choose one style and be consistent")
(print "2. Default to immutable (functional) style")
(print "3. Use mutation only when it makes the algorithm clearer")
(print "4. Document when functions mutate their arguments")
(print "5. Consider naming conventions: append vs append!")

# Example of good naming
(def append! (lst item)
  "Mutates lst by adding item at the end (returns lst for chaining)"
  (= new_len (len lst))
  # This is a hack since we can't extend the list's storage
  # In real code, use the immutable append instead
  (= temp (lst.append item))
  (for i (range (len temp))
    (if (< i new_len)
      (= lst[i] temp[i])))
  lst)

(print "\nRemember: M28 lists are powerful because they support BOTH styles!")