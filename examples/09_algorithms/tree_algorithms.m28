# Tree Algorithms in M28

# Binary Tree Node
(class TreeNode ()
  (def __init__ (self value)
    (= self.value value)
    (= self.left None)
    (= self.right None)))

# Binary Search Tree
(class BST ()
  (def __init__ (self)
    (= self.root None))
  
  # Insert a value
  (def insert (self value)
    (if (== self.root None)
      (= self.root (TreeNode value))
      (self._insert_recursive self.root value)))
  
  (def _insert_recursive (self node value)
    (if (< value node.value)
      (if (== node.left None)
        (= node.left (TreeNode value))
        (self._insert_recursive node.left value))
      (if (== node.right None)
        (= node.right (TreeNode value))
        (self._insert_recursive node.right value))))
  
  # Search for a value
  (def search (self value)
    (self._search_recursive self.root value))
  
  (def _search_recursive (self node value)
    (if (== node None)
      False
      (if (== value node.value)
        True
        (if (< value node.value)
          (self._search_recursive node.left value)
          (self._search_recursive node.right value)))))
  
  # Find minimum value
  (def find_min (self)
    (if (== self.root None)
      None
      (self._find_min_node self.root).value))
  
  (def _find_min_node (self node)
    (while (!= node.left None)
      (= node node.left))
    node)
  
  # Find maximum value
  (def find_max (self)
    (if (== self.root None)
      None
      (self._find_max_node self.root).value))
  
  (def _find_max_node (self node)
    (while (!= node.right None)
      (= node node.right))
    node))

# Tree Traversal Functions
(def inorder_traversal (node result)
  "In-order traversal (left, root, right)"
  (if (!= node None)
    (do
      (inorder_traversal node.left result)
      (= result (+ result [node.value]))
      (inorder_traversal node.right result)))
  result)

(def preorder_traversal (node result)
  "Pre-order traversal (root, left, right)"
  (if (!= node None)
    (do
      (= result (+ result [node.value]))
      (preorder_traversal node.left result)
      (preorder_traversal node.right result)))
  result)

(def postorder_traversal (node result)
  "Post-order traversal (left, right, root)"
  (if (!= node None)
    (do
      (postorder_traversal node.left result)
      (postorder_traversal node.right result)
      (= result (+ result [node.value]))))
  result)

(def level_order_traversal (root)
  "Level-order traversal (breadth-first)"
  (if (== root None)
    (return []))
  
  (= result [])
  (= queue [root])
  
  (while (> (len queue) 0)
    (= level_size (len queue))
    (= level [])
    
    (for i in (range level_size)
      (= node (nth queue 0))
      (= queue queue[1:])
      (= level (+ level [node.value]))
      
      (if (!= node.left None)
        (= queue (+ queue [node.left])))
      (if (!= node.right None)
        (= queue (+ queue [node.right]))))
    
    (= result (+ result [level])))
  
  result)

# Tree Properties
(def tree_height (node)
  "Calculate height of tree"
  (if (== node None)
    -1
    (+ 1 (max (tree_height node.left)
              (tree_height node.right)))))

(def is_balanced (node)
  "Check if tree is balanced"
  (if (== node None)
    (return True))
  
  (= left_height (tree_height node.left))
  (= right_height (tree_height node.right))
  
  (if (<= (abs (- left_height right_height)) 1)
    (if (is_balanced node.left)
      (is_balanced node.right)
      False)
    False))

(def count_nodes (node)
  "Count total nodes in tree"
  (if (== node None)
    0
    (+ 1 (count_nodes node.left)
         (count_nodes node.right))))

(def count_leaves (node)
  "Count leaf nodes in tree"
  (if (== node None)
    0
    (if (== node.left None)
      (if (== node.right None)
        1
        (+ (count_leaves node.left)
           (count_leaves node.right)))
      (+ (count_leaves node.left)
         (count_leaves node.right)))))

# Check if BST
(def is_bst (node min_val max_val)
  "Check if tree is a valid BST"
  (if (== node None)
    True
    (if (> node.value min_val)
      (if (< node.value max_val)
        (if (is_bst node.left min_val node.value)
          (is_bst node.right node.value max_val)
          False)
        False)
      False)))

# Find path to node
(def find_path (root target path)
  "Find path from root to target value"
  (if (== root None)
    (return False))
  
  (= path (+ path [root.value]))
  
  (if (== root.value target)
    (return True))
  
  (if (or (find_path root.left target path)
          (find_path root.right target path))
    (return True))
  
  # Backtrack
  (= path path[:-1])
  False)

# Lowest Common Ancestor
(def lca (root p q)
  "Find lowest common ancestor of nodes p and q"
  (if (== root None)
    (return None))
  
  (if (or (== root.value p) (== root.value q))
    (return root))
  
  (= left (lca root.left p q))
  (= right (lca root.right p q))
  
  (if (!= left None)
    (if (!= right None)
      (return root)
      (return left))
    (if (!= right None)
      (return right)
      (return None))))

# Mirror/Invert tree
(def mirror_tree (node)
  "Create mirror image of tree"
  (if (!= node None)
    (do
      # Swap left and right subtrees
      (= temp node.left)
      (= node.left node.right)
      (= node.right temp)
      
      # Recursively mirror subtrees
      (mirror_tree node.left)
      (mirror_tree node.right)))
  node)

# Diameter of tree
(def diameter_helper (node)
  "Helper function returns (height, diameter)"
  (if (== node None)
    (return [0, 0]))
  
  (= left_data (diameter_helper node.left))
  (= right_data (diameter_helper node.right))
  
  (= left_height (nth left_data 0))
  (= left_diameter (nth left_data 1))
  (= right_height (nth right_data 0))
  (= right_diameter (nth right_data 1))
  
  (= height (+ 1 (max left_height right_height)))
  (= diameter (max left_diameter
                   right_diameter
                   (+ left_height right_height)))
  
  [height, diameter])

(def tree_diameter (root)
  "Find diameter (longest path) in tree"
  (nth (diameter_helper root) 1))

# Demonstrations
(print "Tree Algorithms Demo")
(print "===================")

# Create a BST
(print "\nCreating Binary Search Tree...")
(= bst (BST))
(= values [50, 30, 70, 20, 40, 60, 80, 10, 25, 35, 45])
(for val in values
  (bst.insert val))

(print "Inserted values:" values)

# Tree traversals
(print "\nTree Traversals:")
(print "In-order:" (inorder_traversal bst.root []))
(print "Pre-order:" (preorder_traversal bst.root []))
(print "Post-order:" (postorder_traversal bst.root []))
(print "Level-order:" (level_order_traversal bst.root))

# Search operations
(print "\nSearch Operations:")
(print "Search for 35:" (bst.search 35))
(print "Search for 100:" (bst.search 100))
(print "Minimum value:" (bst.find_min))
(print "Maximum value:" (bst.find_max))

# Tree properties
(print "\nTree Properties:")
(print "Tree height:" (tree_height bst.root))
(print "Total nodes:" (count_nodes bst.root))
(print "Leaf nodes:" (count_leaves bst.root))
(print "Is balanced?" (is_balanced bst.root))
(print "Is valid BST?" (is_bst bst.root float("-inf") float("inf")))

# Path finding
(print "\nPath Finding:")
(= path [])
(if (find_path bst.root 35 path)
  (print "Path to 35:" path))

# LCA
(print "\nLowest Common Ancestor:")
(= lca_node (lca bst.root 20 40))
(if (!= lca_node None)
  (print f"LCA of 20 and 40: {lca_node.value}"))

(= lca_node (lca bst.root 10 45))
(if (!= lca_node None)
  (print f"LCA of 10 and 45: {lca_node.value}"))

# Tree diameter
(print "\nTree diameter:" (tree_diameter bst.root))

# Create unbalanced tree
(print "\n\nUnbalanced Tree Example:")
(= unbalanced (BST))
(for val in [1, 2, 3, 4, 5]
  (unbalanced.insert val))

(print "Inserted values: [1, 2, 3, 4, 5]")
(print "Is balanced?" (is_balanced unbalanced.root))
(print "Tree height:" (tree_height unbalanced.root))