# Searching Algorithms in M28

# Linear Search
(def linear_search (lst target)
  "Search for target in list using linear search"
  (for i in (range (len lst))
    (if (== (nth lst i) target)
      (return i)))
  -1)  # Not found

# Binary Search (iterative)
(def binary_search (lst target)
  "Search for target in sorted list using binary search"
  (= left 0)
  (= right (- (len lst) 1))
  
  (while (<= left right)
    (= mid (int (/ (+ left right) 2)))
    (= mid_val (nth lst mid))
    
    (if (== mid_val target)
      (return mid)
      (if (< mid_val target)
        (= left (+ mid 1))
        (= right (- mid 1)))))
  
  -1)  # Not found

# Binary Search (recursive)
(def binary_search_recursive (lst target left right)
  "Recursive binary search implementation"
  (if (> left right)
    -1
    (do
      (= mid (int (/ (+ left right) 2)))
      (= mid_val (nth lst mid))
      
      (if (== mid_val target)
        mid
        (if (< mid_val target)
          (binary_search_recursive lst target (+ mid 1) right)
          (binary_search_recursive lst target left (- mid 1)))))))

(def binary_search_rec (lst target)
  "Wrapper for recursive binary search"
  (binary_search_recursive lst target 0 (- (len lst) 1)))

# Jump Search
(def jump_search (lst target)
  "Search using jump search algorithm"
  (= n (len lst))
  (= step (int (** n 0.5)))  # sqrt(n)
  (= prev 0)
  
  # Jump through blocks
  (while (< step n)
    (if (< (nth lst (min step (- n 1))) target)
      (do
        (= prev step)
        (= step (+ step (int (** n 0.5)))))
      (break)))
  
  # Linear search in the block
  (while (< prev (min step n))
    (if (== (nth lst prev) target)
      (return prev))
    (= prev (+ prev 1)))
  
  -1)  # Not found

# Interpolation Search
(def interpolation_search (lst target)
  "Search using interpolation (for uniformly distributed data)"
  (= left 0)
  (= right (- (len lst) 1))
  
  (while (<= left right)
    (if (< target (nth lst left))
      (break))
    (if (> target (nth lst right))
      (break))
    # Calculate position using interpolation formula
    (if (== (nth lst left) (nth lst right))
      (return (if (== (nth lst left) target) left -1)))
    
    (= pos (+ left 
              (int (* (/ (- target (nth lst left))
                        (- (nth lst right) (nth lst left)))
                     (- right left)))))
    
    (if (== (nth lst pos) target)
      (return pos)
      (if (< (nth lst pos) target)
        (= left (+ pos 1))
        (= right (- pos 1)))))
  
  -1)  # Not found

# Find first/last occurrence in sorted array with duplicates
(def find_first (lst target)
  "Find first occurrence of target in sorted list"
  (= left 0)
  (= right (- (len lst) 1))
  (= result -1)
  
  (while (<= left right)
    (= mid (int (/ (+ left right) 2)))
    
    (if (== (nth lst mid) target)
      (do
        (= result mid)
        (= right (- mid 1)))  # Continue searching left
      (if (< (nth lst mid) target)
        (= left (+ mid 1))
        (= right (- mid 1)))))
  
  result)

(def find_last (lst target)
  "Find last occurrence of target in sorted list"
  (= left 0)
  (= right (- (len lst) 1))
  (= result -1)
  
  (while (<= left right)
    (= mid (int (/ (+ left right) 2)))
    
    (if (== (nth lst mid) target)
      (do
        (= result mid)
        (= left (+ mid 1)))  # Continue searching right
      (if (< (nth lst mid) target)
        (= left (+ mid 1))
        (= right (- mid 1)))))
  
  result)

# Find peak element
(def find_peak (lst)
  "Find a peak element (greater than neighbors)"
  (= n (len lst))
  
  (if (== n 1)
    (return 0))
  
  (if (>= (nth lst 0) (nth lst 1))
    (return 0))
  
  (if (>= (nth lst (- n 1)) (nth lst (- n 2))))
    (return (- n 1)))
  
  (for i in (range 1 (- n 1))
    (if (>= (nth lst i) (nth lst (- i 1)))
      (if (>= (nth lst i) (nth lst (+ i 1)))
        (return i))))
  
  -1)  # No peak found

# Two-pointer search for pair with given sum
(def two_sum_sorted (lst target_sum)
  "Find pair of numbers that sum to target in sorted list"
  (= left 0)
  (= right (- (len lst) 1))
  
  (while (< left right)
    (= current_sum (+ (nth lst left) (nth lst right)))
    
    (if (== current_sum target_sum)
      (return [left, right])
      (if (< current_sum target_sum)
        (= left (+ left 1))
        (= right (- right 1)))))
  
  None)  # No pair found

# Demonstrations
(print "Searching Algorithms Demo")
(print "========================")

# Test data
(= unsorted_list [64, 34, 25, 12, 22, 11, 90, 88, 76, 50, 43])
(= sorted_list [11, 12, 22, 25, 34, 43, 50, 64, 76, 88, 90])
(= duplicates [1, 2, 2, 2, 3, 4, 4, 5, 5, 5])

(print "\nLinear Search:")
(print "Unsorted list:" unsorted_list)
(print "Searching for 50:" (linear_search unsorted_list 50))
(print "Searching for 100:" (linear_search unsorted_list 100))

(print "\nBinary Search:")
(print "Sorted list:" sorted_list)
(print "Searching for 50:" (binary_search sorted_list 50))
(print "Searching for 100:" (binary_search sorted_list 100))
(print "Recursive search for 50:" (binary_search_rec sorted_list 50))

(print "\nJump Search:")
(print "Searching for 76:" (jump_search sorted_list 76))

(print "\nInterpolation Search:")
(print "Searching for 88:" (interpolation_search sorted_list 88))

(print "\nFinding first/last occurrence:")
(print "List with duplicates:" duplicates)
(print "First occurrence of 2:" (find_first duplicates 2))
(print "Last occurrence of 2:" (find_last duplicates 2))
(print "First occurrence of 5:" (find_first duplicates 5))
(print "Last occurrence of 5:" (find_last duplicates 5))

(print "\nFinding peak element:")
(= peak_list [1, 3, 20, 4, 1, 0])
(print "List:" peak_list)
(= peak_idx (find_peak peak_list))
(print f"Peak element at index {peak_idx}: {(nth peak_list peak_idx)}")

(print "\nTwo-sum in sorted array:")
(print "Finding pair that sums to 100:" (two_sum_sorted sorted_list 100))
(= result (two_sum_sorted sorted_list 100))
(if result
  (print f"Numbers: {(nth sorted_list (nth result 0))} + {(nth sorted_list (nth result 1))} = 100"))