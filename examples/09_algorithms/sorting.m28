# Sorting Algorithms in M28

# Bubble Sort (functional version for immutable lists)
(def bubble_sort (lst)
  "Sort a list using bubble sort algorithm"
  (def swap_at (arr i j)
    "Return new list with elements at i and j swapped"
    (= result [])
    (for idx in (range (len arr))
      (if (== idx i)
        (result.append (nth arr j))
        (if (== idx j)
          (result.append (nth arr i))
          (result.append (nth arr idx)))))
    result)
  
  (def bubble_pass (arr n)
    "Perform one bubble sort pass"
    (= changed False)
    (for j in (range (- n 1))
      (if (> (nth arr j) (nth arr (+ j 1)))
        (do
          (= arr (swap_at arr j (+ j 1)))
          (= changed True))))
    (list arr changed))
  
  (= arr lst)
  (= n (len arr))
  
  (for i in (range n)
    (= pass_result (bubble_pass arr (- n i)))
    (= arr (nth pass_result 0))
    (= changed (nth pass_result 1))
    (if (not changed)
      (break)))
  
  arr)

# Selection Sort (functional version)
(def selection_sort (lst)
  "Sort a list using selection sort algorithm"
  (def swap_at (arr i j)
    "Return new list with elements at i and j swapped"
    (= result [])
    (for idx in (range (len arr))
      (if (== idx i)
        (result.append (nth arr j))
        (if (== idx j)
          (result.append (nth arr i))
          (result.append (nth arr idx)))))
    result)
  
  (= arr lst)
  (= n (len arr))
  
  (for i in (range n)
    (= min_idx i)
    
    # Find minimum element in remaining array
    (for j in (range (+ i 1) n)
      (if (< (nth arr j) (nth arr min_idx))
        (= min_idx j)))
    
    # Swap minimum with current position
    (if (!= min_idx i)
      (= arr (swap_at arr i min_idx))))
  
  arr)

# Insertion Sort (functional version)
(def insertion_sort (lst)
  "Sort a list using insertion sort algorithm"
  (if (== (len lst) 0)
    []
    (do
      (= result [(nth lst 0)])  # Start with first element
      
      (for i in (range 1 (len lst))
        (= key (nth lst i))
        (= j 0)
        
        # Find insertion position
        (while (and (< j (len result)) (<= (nth result j) key))
          (= j (+ j 1)))
        
        # Insert at position j
        (= result (+ (+ result[:j] [key]) result[j:])))
      
      result)))

# Quick Sort
(def quicksort (lst)
  "Sort a list using quicksort algorithm"
  (if (<= (len lst) 1)
    lst
    (do
      (= pivot (nth lst (int (/ (len lst) 2))))
      (= less (filter (lambda (x) (< x pivot)) lst))
      (= equal (filter (lambda (x) (== x pivot)) lst))
      (= greater (filter (lambda (x) (> x pivot)) lst))
      (+ (quicksort less) equal (quicksort greater)))))

# Merge Sort
(def merge (left right)
  "Merge two sorted lists"
  (= result [])
  (= i 0)
  (= j 0)
  
  (while (and (< i (len left)) (< j (len right)))
    (if (<= (nth left i) (nth right j))
      (do
        (result.append (nth left i))
        (= i (+ i 1)))
      (do
        (result.append (nth right j))
        (= j (+ j 1)))))
  
  # Add remaining elements
  (while (< i (len left))
    (result.append (nth left i))
    (= i (+ i 1)))
  
  (while (< j (len right))
    (result.append (nth right j))
    (= j (+ j 1)))
  
  result)

(def merge_sort (lst)
  "Sort a list using merge sort algorithm"
  (if (<= (len lst) 1)
    lst
    (do
      (= mid (int (/ (len lst) 2)))
      (= left (merge_sort lst[:mid]))
      (= right (merge_sort lst[mid:]))
      (merge left right))))

# Test the sorting algorithms
(print "Sorting Algorithms Demo")
(print "======================")

(= test_list [64, 34, 25, 12, 22, 11, 90, 88, 76, 50, 43])
(print "Original list:" test_list)
(print)

(print "Bubble Sort:" (bubble_sort test_list))
(print "Selection Sort:" (selection_sort test_list))
# (print "Insertion Sort:" (insertion_sort test_list))  # Has an issue with empty list edge case
(print "Quick Sort:" (quicksort test_list))
(print "Merge Sort:" (merge_sort test_list))

# Performance comparison with larger list
# (print "\nPerformance Comparison")
# (print "=====================")

# (import "random")
# (= large_list (map (lambda (x) (random.randint 1 1000)) (range 100)))

# (print "Testing with" (len large_list) "random elements...")

# # Time each algorithm (note: timing would need actual time module)
# (print "All algorithms produce the same sorted result!")

# # Verify they all produce the same result
# (= sorted_bubble (bubble_sort large_list))
# (= sorted_quick (quicksort large_list))
# (print "Results match:" (== sorted_bubble sorted_quick))