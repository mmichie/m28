# 02_lambda_functions.m28
# A progressive tutorial on lambda functions in M28

#############################################
## SECTION 1: Introduction to Lambda Functions
#############################################

# Lambda functions are anonymous functions that can be assigned to variables
# or passed directly as arguments to other functions

(print "LAMBDA FUNCTIONS IN M28")
(print "=======================")
(print)

# Basic lambda syntax:
# (lambda (parameters) body)

# Simple lambda function for addition
(= add (lambda (a b) (+ a b)))

# Testing our addition function
(print "Basic lambda function:")
(print "Regular addition: 2 + 3 =")
(print (+ 2 3))

(print "Using lambda function: add(2, 3) =")
(print (add 2 3))
(print)


#############################################
## SECTION 2: Single Parameter Lambda Functions
#############################################

# Lambda functions can have a single parameter
# The parentheses around a single parameter are optional

# Function with a single parameter using simplified syntax
(= add1 (lambda x (+ x 1)))

# Test the function
(print "Lambda with single parameter:")
(print "add1(5) =")
(print (add1 5))
(print)

# Function with a single parameter using standard syntax
(= square (lambda (x) (* x x)))

# Test the function
(print "Square function with standard syntax:")
(print "square(4) =")
(print (square 4))
(print)


#############################################
## SECTION 3: Multi-Statement Lambda Functions
#############################################

# Lambda functions can contain multiple statements
# The last statement is the return value

# Define a greeting function with multiple statements
(= greet (lambda (name greeting)
    # Create a local message variable
    (= message (+ greeting ", " name "!"))
    # The last expression is the return value
    message))

# Call the greeting function
(print "Multi-statement lambda:")
(print "greet(\"Alice\", \"Hello\") =")
(print (greet "Alice" "Hello"))
(print)


#############################################
## SECTION 4: Anonymous Lambda Functions
#############################################

# Lambda functions can be used without assigning them to variables
# This is useful for one-time use functions

(print "Anonymous lambda usage:")
(print ((lambda (x y) (* x y)) 5 6))
(print)


#############################################
## SECTION 5: Lambda Functions as Arguments
#############################################

# Lambda functions can be passed as arguments to other functions

# Define a function that applies a function to a value
(def (apply-func func value)
  (func value))

# Use the function with different lambdas
(print "Lambda functions as arguments:")
(print "Doubling 5:")
(print (apply-func (lambda (x) (* 2 x)) 5))

(print "Squaring 4:")
(print (apply-func (lambda (x) (* x x)) 4))
(print)


#############################################
## SECTION 6: Returning Lambda Functions
#############################################

# Functions can return lambda functions
# This is the foundation for closures

# Create a function that returns a custom adder
(def (make-adder n)
  (lambda (x) (+ x n)))

# Create specific adder functions
(= add5 (make-adder 5))
(= add10 (make-adder 10))

# Test the functions
(print "Returning lambda functions:")
(print "add5(3) =")
(print (add5 3))
(print "add10(3) =")
(print (add10 3))