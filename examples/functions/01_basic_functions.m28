# 01_basic_functions.m28
# A progressive tutorial on basic function creation and usage in M28

#############################################
## SECTION 1: Simple Function Creation
#############################################

# There are two main ways to create functions in M28:
# 1. Using lambda expressions
# 2. Using the define/def special forms

# METHOD 1: Lambda Functions (anonymous functions)
# ---------------------------------------------
# The most basic way to create a function is with lambda
# Format: (= function-name (lambda (arguments) body))

# Simple addition function using lambda
(= add (lambda (a b)
  (+ a b)))

# Test our function
(print "Testing basic lambda function:")
(print "add(1, 2) =")
(print (add 1 2))
(print)


#############################################
## SECTION 2: Define/Def Special Forms
#############################################

# METHOD 2: Define Special Form 
# ---------------------------------------------
# The 'define' or 'def' special forms provide a cleaner syntax
# Format: (define (function-name arguments) body)

# Define a simple addition function
(define (add2 a b)
  (+ a b))

# Test the function
(print "Testing define special form:")
(print "add2(2, 3) =")
(print (add2 2 3))
(print)

# Functions with multiple statements
# ---------------------------------------------
# Functions can contain multiple statements, with the last one returned

# Create a greeting function with multiple statements
(def (greet name)
  # Local variable assignment
  (= message (+ "Hello, " name "!"))
  # The last expression is returned
  message)

# Test the greeting function
(print "Testing multi-statement function:")
(print "greet(\"World\") =")
(print (greet "World"))
(print)


#############################################
## SECTION 3: Functions with Mathematical Operations
#############################################

# Function to calculate power
(def (power base exponent)
  # Use multiplication for a simple power function
  (if (== exponent 0)
    1
    (if (== exponent 1)
      base
      (* base (power base (- exponent 1))))))

# Test with different arguments
(print "Testing mathematical function:")
(print "2^3 =")
(print (power 2 3))
(print "3^2 =")
(print (power 3 2))
(print)


#############################################
## SECTION 4: Function Composition
#############################################

# Functions can call other functions
(def (square x)
  (* x x))

(def (cube x)
  (* x (square x)))

(print "Testing function composition:")
(print "square(4) =")
(print (square 4))
(print "cube(3) =")
(print (cube 3))