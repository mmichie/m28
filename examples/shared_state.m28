# Shared state methods example
# This demonstrates methods sharing state correctly

# Counter with shared state across methods
(def (make-counter)
  # Private state
  (= count 0)
  
  # Define all methods in one lambda to ensure they share state
  (def (make-methods)
    # Increment method
    (def (increment)
      (= count (+ count 1))
      count)
    
    # Get count method
    (def (get-count)
      count)
    
    # Return dictionary with methods
    (dict "inc" increment "get" get-count))
  
  # Create and return the methods
  (make-methods))

# Create a counter
(= counter (make-counter))

# Test methods
(print "Initial count: " ((get counter "get")))
(print "After increment: " ((get counter "inc")))
(print "Current count: " ((get counter "get")))
(print "After another increment: " ((get counter "inc")))
(print "Final count: " ((get counter "get")))

# Create another counter to test isolation
(= counter2 (make-counter))
(print "Counter 2 initial: " ((get counter2 "get")))
(print "Counter 2 increment: " ((get counter2 "inc")))
(print "Counter 1 unchanged: " ((get counter "get")))