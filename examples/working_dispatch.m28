# Working dispatch example
# Using a single function with operation dispatch

# Create a counter with operation dispatch
(def (make-counter)
  # Private state
  (= count 0)
  
  # Return a function that handles different operations
  (lambda (operation)
    (if (== operation "increment")
      (begin
        (= count (+ count 1))
        count)
      (if (== operation "decrement")
        (begin
          (= count (- count 1))
          count)
        (if (== operation "get")
          count
          "Unknown operation")))))

# Create counters
(= counter1 (make-counter))
(= counter2 (make-counter))

# Test operations
(print "Counter 1 initial: " (counter1 "get"))
(print "Counter 1 increment: " (counter1 "increment"))
(print "Counter 1 increment again: " (counter1 "increment"))
(print "Counter 1 current: " (counter1 "get"))
(print "Counter 1 decrement: " (counter1 "decrement"))
(print "Counter 1 final: " (counter1 "get"))

# Check counter 2 is separate
(print "Counter 2 initial: " (counter2 "get"))
(print "Counter 2 increment: " (counter2 "increment"))
(print "Counter 2 current: " (counter2 "get"))

# Verify counter 1 is unchanged by counter 2
(print "Counter 1 is still: " (counter1 "get"))