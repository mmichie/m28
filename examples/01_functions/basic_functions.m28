# Basic Functions in M28
# Use def ONLY for functions (never for variables)

# Simple function with no parameters
(def say_hello ()
  (print "Hello from a function!"))

# Call the function
(say_hello)

# Function with parameters
(def greet (name)
  (print f"Hello, {name}!"))

(greet "Alice")
(greet "Bob")

# Function with return value
(def add (a b)
  (+ a b))

(= result (add 5 3))
(print "5 + 3 =" result)

# Function with multiple parameters
(def introduce (name age city)
  (print f"{name} is {age} years old and lives in {city}"))

(introduce "Charlie" 25 "New York")

# Function with multiple return values
(def calculate (a b)
  (list (+ a b) (- a b) (* a b) (/ a b)))

(= results (calculate 10 2))
(= sum_val (get-item results 0))
(= diff (get-item results 1))
(= prod (get-item results 2))
(= quot (get-item results 3))
(print "\nCalculations for 10 and 2:")
(print "Sum:" sum_val)
(print "Difference:" diff)
(print "Product:" prod)
(print "Quotient:" quot)

# Function with docstring (convention)
(def factorial (n)
  # Calculate factorial of n recursively
  (if (<= n 1)
      1
      (* n (factorial (- n 1)))))

(print "\nFactorials:")
(print "5! =" (factorial 5))
(print "10! =" (factorial 10))

# Functions are first-class values
(= my_func add)
(print "\nFunction as value:")
(print "my_func(7, 3) =" (my_func 7 3))

# Nested functions
(def outer (x)
  (def inner (y)
    (+ x y))
  inner)  # Return the inner function

(= add_5 (outer 5))
(print "\nNested function (closure):")
(print "add_5(3) =" (add_5 3))
(print "add_5(10) =" (add_5 10))

