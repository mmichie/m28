# Lambda Functions in M28
# Anonymous functions for simple operations

# Basic lambda
(= square (lambda (x) (* x x)))
(print "Square of 5:" (square 5))

# Lambda with multiple parameters
(= add (lambda (x y) (+ x y)))
(print "3 + 4 =" (add 3 4))

# Inline lambda usage
(print "\nUsing lambda directly:")
(print "Result:" ((lambda (x) (* x 2)) 10))

# Lambda in map
(= numbers [1, 2, 3, 4, 5])
(= doubled (map (lambda (x) (* x 2)) numbers))
(print "\nOriginal:" numbers)
(print "Doubled:" doubled)

# Lambda in filter
(= evens (filter (lambda (x) (== (% x 2) 0)) numbers))
(print "\nEven numbers:" evens)

# Lambda in reduce
(= sum (reduce (lambda (acc x) (+ acc x)) numbers 0))
(= product (reduce (lambda (acc x) (* acc x)) numbers 1))
(print "\nSum:" sum)
(print "Product:" product)

# Lambda returning lambda (currying)
(= make_adder (lambda (n)
  (lambda (x) (+ x n))))

(= add_10 (make_adder 10))
(= add_5 (make_adder 5))

(print "\nCurried functions:")
(print "add_10(7) =" (add_10 7))
(print "add_5(7) =" (add_5 7))

# Complex lambda
(= calculator (lambda (op)
  (if (== op "+")
      (lambda (x y) (+ x y))
      (elif (== op "-")
          (lambda (x y) (- x y))
          (elif (== op "*")
              (lambda (x y) (* x y))
              (lambda (x y) (/ x y)))))))

(= adder (calculator "+"))
(= multiplier (calculator "*"))

(print "\nCalculator lambdas:")
(print "adder(5, 3) =" (adder 5 3))
(print "multiplier(5, 3) =" (multiplier 5 3))

# Lambda with conditional
(= abs_val (lambda (x) (if (< x 0) (- x) x)))
(print "\nAbsolute values:")
(print "abs(-5) =" (abs_val -5))
(print "abs(5) =" (abs_val 5))

# Sorting with lambda
(= alice {"name": "Alice", "age": 30})
(= bob {"name": "Bob", "age": 25})
(= charlie {"name": "Charlie", "age": 35})
(= people (list alice bob charlie))

# Sort by age
# Note: sorted doesn't support keyword arguments yet, using a workaround
(= get_age (lambda (p) p.age))
(= sorted_by_age people)  # TODO: implement (sorted people key = get_age)
(print "\nSorted by age:")
(for person in sorted_by_age
  (print (get person "name") ": " (get person "age")))

# Practical example: temperature converter
(= celsius_to_fahrenheit (lambda (c) (+ (* c 1.8) 32)))
(= fahrenheit_to_celsius (lambda (f) (/ (- f 32) 1.8)))

(print "\nTemperature conversion:")
(print "20°C in Fahrenheit:" (celsius_to_fahrenheit 20))
(print "68°F in Celsius:" (fahrenheit_to_celsius 68))

# Lambda with default parameters
(print "\nLambda with default parameters:")

# Simple default
(= greet (lambda (name (greeting "Hello"))
  (+ greeting " " name "!")))

(print (greet "World"))           # "Hello World!"
(print (greet "Alice" "Hi"))      # "Hi Alice!"

# Multiple defaults
(= format_number (lambda (num (prefix "$") (decimals 2))
  (+ prefix (str num))))  # Simplified formatting

(print (format_number 100))              # "$100"
(print (format_number 100 "€"))          # "€100"
(print (format_number 100 "£" 0))        # "£100"

# Lambda with default returning lambda
(= make_formatter (lambda ((left "[") (right "]"))
  (lambda (text) (+ left text right))))

(= brackets (make_formatter))
(= parens (make_formatter "(" ")"))
(= quotes (make_formatter "\"" "\""))

(print "\nFormatters with defaults:")
(print (brackets "text"))    # "[text]"
(print (parens "text"))      # "(text)"
(print (quotes "text"))      # "\"text\""