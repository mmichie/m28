# Simplified closures example
# This demonstrates closures with minimal complexity

# A person factory that creates people with properties
(def (person-factory)
  # Factory state
  (= next-id 0)
  
  # Function to create a new person
  (def (create-person name age)
    # Increment the ID for each person
    (= next-id (+ next-id 1))
    (= id next-id)
    
    # Private person state
    (= birthdays 0)
    
    # Method to have a birthday
    (def (celebrate-birthday)
      (= birthdays (+ birthdays 1))
      (= age (+ age 1))
      (+ name " is now " (str age) " years old!"))
    
    # Return an object with methods
    (= methods (dict))
    (print "Creating methods dictionary...")
    (print "Methods before set: " methods)
    
    # Use the set function directly instead of dict.set
    (= methods (dict "birthday" celebrate-birthday))
    (print "Methods after set: " methods)
    
    # Return the methods dictionary
    methods)
  
  # Return the person creator function
  create-person)

# Create the person factory
(= create-person (person-factory))
(print "Created person factory")

# Create a person
(= alice (create-person "Alice" 30))
(print "Created alice person object")
(print "Alice object type: " (type alice))

# Test the birthday method - Get the method first
(= birthday-method (get alice "birthday"))
(print "Got birthday method")
(print "Birthday method type: " (type birthday-method))

# Call the method
(print "Calling birthday method...")
(= result (birthday-method))
(print "Birthday result: " result)

# Call again directly
(print "Using function application - call using get method")
(= birthday-fn (get alice "birthday"))
(print "Direct call result: " (birthday-fn))