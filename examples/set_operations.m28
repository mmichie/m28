# Example of using set operations in M28
(print "=== Set Operations Example ===")

# Creating sets
(print "\nCreating sets:")
(= empty_set (set))
(= numbers (set [1 2 3 4 5]))
(= vowels (set ["a" "e" "i" "o" "u"]))
(= primes (set [2 3 5 7 11]))
(= even (set [2 4 6 8 10]))

(print "Empty set:" empty_set)
(print "Numbers set:" numbers)
(print "Vowels set:" vowels)
(print "Prime numbers:" primes)
(print "Even numbers:" even)

# Set methods
(print "\nSet methods:")
(print "Size of numbers set:" (len numbers))
(print "Is 3 in numbers?:" (set.contains numbers 3))
(print "Is 10 in numbers?:" (set.contains numbers 10))

# Set operations
(print "\nSet operations:")
(= combined (set.union numbers primes))
(print "Union of numbers and primes:" combined)

(= common (set.intersection numbers primes))
(print "Intersection of numbers and primes:" common)

(= difference (set.difference numbers primes))
(print "Difference (numbers - primes):" difference)

(= sym_diff (set.symmetric_difference numbers primes))
(print "Symmetric difference:" sym_diff)

# Modifying sets
(print "\nModifying sets:")
(print "Original numbers:" numbers)
(set.add numbers 10)
(print "After adding 10:" numbers)
(set.remove numbers 1)
(print "After removing 1:" numbers)

# Set comparisons
(print "\nSet comparisons:")
(= small_primes (set [2 3 5]))
(print "small_primes is subset of primes?:" (set.issubset small_primes primes))
(print "primes is superset of small_primes?:" (set.issuperset primes small_primes))
(print "primes and even are disjoint?:" (set.isdisjoint primes even))

# In-place operations
(print "\nIn-place operations:")
(= s1 (set [1 2 3]))
(= s2 (set [3 4 5]))
(print "s1 before update:" s1)
(print "s2:" s2)
(set.update s1 s2)
(print "s1 after update with s2:" s1)

(= s3 (set [1 2 3 4 5]))
(= s4 (set [4 5 6]))
(print "s3 before intersection update:" s3)
(print "s4:" s4)
(set.intersection_update s3 s4)
(print "s3 after intersection update with s4:" s3)

# Converting sets to lists
(print "\nConverting to list:")
(= vowel_list (list vowels))
(print "Vowels as a list:" vowel_list)

# Creating sets from different types
(print "\nCreating sets from different types:")
(= char_set (set "hello"))
(print "Set from string 'hello':" char_set)

(= dict_key_set (set (dict "a" 1 "b" 2 "c" 3)))
(print "Set from dictionary keys:" dict_key_set)