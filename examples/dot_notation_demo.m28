; Dot notation demonstration for M28

(print "=== M28 Dot Notation Demo ===\n")

; 1. Dictionary property access
(print "1. Dictionary property access:")
(def person {"name": "Alice", "age": 30, "city": "New York"})
(print "Person: " person)
(print "Name: " person.name)
(print "Age: " person.age)
(print "City: " person.city)

; 2. List index access
(print "\n2. List index access:")
(def colors ["red", "green", "blue", "yellow"])
(print "Colors: " colors)
(print "First color: " colors.0)
(print "Third color: " colors.2)

; 3. Property assignment
(print "\n3. Property assignment:")
(= person.age 31)
(= person.city "Boston")
(print "Updated person: " person)

; 4. Nested property access
(print "\n4. Nested property access:")
(def company {
    "name": "TechCorp",
    "ceo": {"name": "Bob", "age": 45},
    "employees": (list
        {"name": "Carol", "dept": "Engineering"}
        {"name": "Dave", "dept": "Sales"})
})
(print "CEO name: " company.ceo.name)
(print "First employee: " company.employees.0.name)
(print "Second employee dept: " company.employees.1.dept)

; 5. File I/O with method calls
(print "\n5. File I/O with method calls:")
(def f (open "demo.txt" "w"))
(f.write "Hello from M28!\n")
(f.write "Dot notation makes code cleaner.\n")
(f.close)

(def f2 (open "demo.txt" "r"))
(print "File contents:")
(print (f2.read))
(f2.close)

; 6. Mixed special form and dot syntax
(print "\n6. Mixed syntax:")
(print "Using special form: " (. person "name"))
(print "Using dot syntax: " person.name)

(print "\n=== Demo complete! ===")