# Multi-Symbol Module Import Example
# This demonstrates importing specific symbols from modules in M28

(print "=== Multi-Symbol Module Import Example ===")

# First, let's examine the module contents to see what we can import
(print "\n1. First examine module contents:")
(import "modules/simple_module")
(print "Module type:" (type simple_module))
(print "Module variables:" simple_module.MODULE_NAME simple_module.VALUE)
(print "Available symbols:" (dict.keys simple_module))

# Import specific symbols from a module
(print "\n2. Importing specific symbols from a module:")
(import (from "modules/simple_module" import add multiply))

# Now we can use these imported symbols directly in our namespace
(print "\n3. Using imported symbols directly:")
(print "add(5, 3):" (add 5 3))
(print "multiply(4, 7):" (multiply 4 7))

# We can also import from modules defined in the current file
(print "\n4. Creating and importing from an in-memory module:")
(def local_module (dict
  "greeting" "Hello, world!"
  "farewell" "Goodbye!"
  "calculate" (lambda (x) (* x x))
))

# Import specific symbols from our in-memory module
(import (from local_module import greeting farewell))

# Use the imported symbols
(print "\n5. Using symbols from in-memory module:")
(print greeting)
(print farewell)

# Import multiple symbols from different modules in separate statements
(print "\n6. Importing from multiple modules:")
(import (from "modules/simple_module" import VALUE))
(print "VALUE imported from simple_module:" VALUE)

# Try importing a symbol with the same name from another module
# This will override the previous import
(def other_module (dict "VALUE" "Overridden value"))
(import (from other_module import VALUE))
(print "VALUE is now from other_module:" VALUE)

# Demonstrate importing from a module with export restrictions
(print "\n7. Importing from a module with export control:")
(def restricted_module (dict
  "__exports__" '(public_var public_func)
  "public_var" "This is public"
  "public_func" (lambda (x) (+ x 10))
  "private_var" "This is private"
))

# Import the public symbols
(import (from restricted_module import public_var public_func))
(print "public_var:" public_var)
(print "public_func(5):" (public_func 5))

# Trying to import a private symbol would fail at runtime
(print "\n8. Attempting to import private symbols (should fail):")
(try
  (import (from restricted_module import private_var))
  (catch e
    (print "Error (expected):" e)))

(print "\n=== End of Multi-Symbol Module Import Example ===")