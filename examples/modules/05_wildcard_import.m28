# Wildcard Module Import Example
# This demonstrates the wildcard import feature in M28 module system

(print "=== Wildcard Module Import Example ===")

# Import an enhanced module that has export control
(print "\n1. First let's import the module normally to see what it contains:")
(import "modules/simple_module")
(print "Module type:" (type simple_module))
(print "Module variables:" simple_module.MODULE_NAME simple_module.VALUE)

# Display available module content
(print "\n2. Available symbols in the module:")
(dict.keys simple_module)

# Now use wildcard import to import all exported symbols
(print "\n3. Using wildcard import to import all symbols:")
(import (from "modules/simple_module" import *))

# We should now have direct access to all symbols
(print "\n4. Directly accessing imported symbols:")
(print "MODULE_NAME:" MODULE_NAME)
(print "VALUE:" VALUE)
(print "add(5, 10):" (add 5 10))

# Create a new module with some symbols to test filtering
(print "\n5. Creating test module for filtering test:")

# Test wildcard import with filtering
(print "\n6. Wildcard import with filtering (excluding is_even):")
(def test_module (dict
  "__exports__" '(symbol1 symbol2 symbol3 symbol4 symbol5)
  "symbol1" "value1"
  "symbol2" "value2"
  "symbol3" "value3"
  "symbol4" "value4"
  "symbol5" "value5"
))

(import (from test_module import * except symbol3 symbol5))

(print "Imported: symbol1 =" symbol1)
(print "Imported: symbol2 =" symbol2)
(print "Imported: symbol4 =" symbol4)

(try
  (print "Excluded: symbol3 =" symbol3)
  (catch e
    (print "Error accessing excluded symbol3 (expected):" e)))

(try
  (print "Excluded: symbol5 =" symbol5)
  (catch e
    (print "Error accessing excluded symbol5 (expected):" e)))

(print "\n=== End of Wildcard Module Import Example ===")