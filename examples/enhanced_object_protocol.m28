# Enhanced Object Protocol Example
# Demonstrating method access on various types

# Test list operations
(print "\n=== List Methods via Object Protocol ===")
(def my-list [1 2 3 4 5])
(print "Original list:" my-list)

# Call the length method
(print "Length:" ((dot my-list "length")))

# Call the append method
(def new-list ((dot my-list "append") 6))
(print "After append:" new-list)

# Map with a lambda function
(def doubled ((dot my-list "map") (lambda (x) (* x 2))))
(print "Doubled values:" doubled)

# Test string operations
(print "\n=== String Methods via Object Protocol ===")
(def my-string "Hello, World!")
(print "Original string:" my-string)

# Call the upper method
(print "Uppercase:" ((dot my-string "upper")))

# Call the lower method
(print "Lowercase:" ((dot my-string "lower")))

# Call the replace method
(print "Replace:" ((dot my-string "replace") "Hello" "Goodbye"))

# Split the string
(print "Split:" ((dot my-string "split") ", "))

# Test set operations
(print "\n=== Set Methods via Object Protocol ===")
(def set1 (set [1 2 3 4]))
(def set2 (set [3 4 5 6]))
(print "Set 1:" set1)
(print "Set 2:" set2)

# Set operations
(print "Union:" ((dot set1 "union") set2))
(print "Intersection:" ((dot set1 "intersection") set2))
(print "Difference:" ((dot set1 "difference") set2))

# Test tuple operations
(print "\n=== Tuple Methods via Object Protocol ===")
(def my-tuple (tuple [10 20 30]))
(print "Original tuple:" my-tuple)

# Call the length method
(print "Length:" ((dot my-tuple "length")))

# Convert to list
(print "As list:" ((dot my-tuple "tolist")))

# Test completion message
(print "\n=== Object Protocol Enhancement Complete ===")
(print "✅ Enhanced Object Protocol now supports multiple built-in types!")
(print "✅ Lists, strings, sets, and tuples now work with dot notation!")