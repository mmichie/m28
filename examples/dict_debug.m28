# Debugging dictionary operations
(print "=== Dictionary Debug ===")

# Test if dict.get exists in the environment
(= d (dict "a" 1 "b" 2))
(print "Created dictionary:" d)

# Try to directly use the dict.get function
(print "Type of d:" (type d))
(print "Looking up 'a' with dict.get:")
(= func_name "dict.get")
(print "Is function defined?:" (if (defined? func_name) "YES" "NO"))

# Try an alternative approach
(print "\nAlternative with simple get:")
(print "Value of 'a':" (get d "a"))
(print "Value of missing key with default:" (get d "missing" "default"))

# Create a simple helper function for dictionary operations
(print "\nCreating helper function for dict.get:")
(def (my_dict_get d key default)
  (if (defined? key)
      (get d key)
      default))

(print "Testing my_dict_get:")
(print "my_dict_get d 'a':" (my_dict_get d "a" "default"))
(print "my_dict_get d 'missing':" (my_dict_get d "missing" "default"))