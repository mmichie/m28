# Object Dot Notation Example
# This file demonstrates the use of dot notation with object-like dictionaries

(print "=== Object Dot Notation Example ===")

# Define a constructor function for Person objects
(def (make-person name age)
  (dict
    "name" name
    "age" age
    "greet" (lambda (self)
      (+ "Hello, my name is " self.name "!"))
    "birthday" (lambda (self)
      (= self.age (+ self.age 1))
      self.age)
    "add_skill" (lambda (self skill)
      (if (not (hasattr self "skills"))
        (= self.skills []))
      (= self.skills (+ self.skills [skill]))
      self.skills)
  ))

# Create person instances
(print "\n--- Creating Person Objects ---")
(def alice (make-person "Alice" 30))
(def bob (make-person "Bob" 25))

# Access object properties
(print "\n--- Property Access ---")
(print "Alice's name:" alice.name)
(print "Alice's age:" alice.age)
(print "Bob's name:" bob.name)
(print "Bob's age:" bob.age)

# Call object methods
(print "\n--- Method Calls ---")
(print "Alice greets:" (alice.greet alice))
(print "Bob greets:" (bob.greet bob))

# Update object state through method calls
(print "\n--- State Updates ---")
(print "Alice's age before birthday:" alice.age)
(print "Alice's new age:" (alice.birthday alice))
(print "Alice's age after birthday:" alice.age)

# Add new properties to objects
(print "\n--- Dynamic Property Addition ---")
(= alice.email "alice@example.com")
(print "Alice's email:" alice.email)

# Adding collections as properties
(print "\n--- Skills Addition ---")
(print "Alice's initial skills:" (alice.add_skill alice "Python"))
(print "Alice's updated skills:" (alice.add_skill alice "JavaScript"))
(print "Direct skills access:" alice.skills)

# Create a more complex nested object system
(print "\n--- Class-like Behavior with Nested Objects ---")

(def (make-account owner balance)
  (dict
    "owner" owner
    "balance" balance
    "transactions" []
    "deposit" (lambda (self amount)
      (= self.balance (+ self.balance amount))
      (= self.transactions (+ self.transactions [(dict "type" "deposit" "amount" amount)]))
      self.balance)
    "withdraw" (lambda (self amount)
      (if (< self.balance amount)
        (raise "InsufficientFunds" (+ "Cannot withdraw " amount " from balance of " self.balance)))
      (= self.balance (- self.balance amount))
      (= self.transactions (+ self.transactions [(dict "type" "withdrawal" "amount" amount)]))
      self.balance)
    "get_transaction_history" (lambda (self)
      self.transactions)
  ))

# Create a bank account and perform operations
(def account (make-account alice 1000))
(print "\nAccount owner:" account.owner.name)
(print "Initial balance:" account.balance)

(print "After deposit:" (account.deposit account 500))
(print "After withdrawal:" (account.withdraw account 200))

(print "\nTransaction history:")
(def history (account.get_transaction_history account))
(for transaction history
  (print "- Type:" transaction.type "Amount:" transaction.amount))

(print "\n=== Example Complete ===")