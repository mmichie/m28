# Example demonstrating the enhanced module system
(print "=== Enhanced Module System Example ===")

# Import a module with __exports__ control
(print "\n1. Importing module with export control:")
(import "modules/sample_module")

(print "Module name:" sample_module.MODULE_NAME)
(print "Version:" sample_module.VERSION)
(print "Author:" sample_module.AUTHOR)

# Try accessing a public function
(print "\n2. Calling exported functions:")
(print "Greeting:" (sample_module.greet "World"))
(print "Calculation:" (sample_module.calculate 5 7))

# Try accessing the public configuration
(print "\n3. Accessing exported dictionary:")
(print "Public config:" sample_module.PUBLIC_CONFIG)
(print "Config version:" (get sample_module.PUBLIC_CONFIG "version"))

# The following would fail if uncommented, as _internal_config is not exported
# (print "Internal config:" sample_module._internal_config)

# Check module information
(print "\n4. Module Information:")
(print (module_info "modules/sample_module"))

# Show module search paths
(print "\n5. Module Search Paths:")
(print (get_module_paths))

# Add a custom search path
(print "\n6. Adding Custom Search Path:")
(add_module_path "./custom_modules")
(print "Updated paths:")
(print (get_module_paths))

# Reload the module (this would refresh any changes to the module file)
(print "\n7. Reloading Module:")
(reload_module "modules/sample_module")
(print "Module reloaded - Version:" sample_module.VERSION)

(print "\n=== Module System Example Complete ===")