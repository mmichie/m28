# Person object with operation dispatch
# Final demonstration of closures and OOP in M28

# Create a person with multiple operations
(def (make-person name age)
  # Private state
  (= person-name name)
  (= person-age age)
  (= birthdays 0)
  (= friends [])
  
  # Return a function that handles different operations
  (lambda (operation)
    (if (== operation "name")
      # Return the name
      person-name
      
      (if (== operation "age")
        # Return the age
        person-age
        
        (if (== operation "birthday")
          # Have a birthday
          (begin
            (= birthdays (+ birthdays 1))
            (= person-age (+ person-age 1))
            (+ person-name " is now " (str person-age) " years old!"))
          
          (if (== operation "info")
            # Get full info
            (dict 
              "name" person-name
              "age" person-age
              "birthdays" birthdays
              "friends" (len friends))
            
            # Unknown operation
            (+ "Unknown operation: " operation)))))))

# Create people
(= alice (make-person "Alice" 30))
(= bob (make-person "Bob" 25))

# Test basic operations
(print "Alice's name: " (alice "name"))
(print "Alice's age: " (alice "age"))
(print "Bob's name: " (bob "name"))
(print "Bob's age: " (bob "age"))

# Celebrate birthdays
(print (alice "birthday"))
(print (alice "birthday"))
(print "Alice's age after birthdays: " (alice "age"))

# Get info
(print "Alice's info: " (alice "info"))
(print "Bob's info: " (bob "info"))

# Verify independence
(print (bob "birthday"))
(print "Bob's info after birthday: " (bob "info"))
(print "Alice's info unchanged: " (alice "info"))