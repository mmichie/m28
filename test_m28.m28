# M28 Test Suite - Single comprehensive test file
# Run with: ./bin/m28 test_m28.m28

(print "=" 50)
(print "          M28 Test Suite")
(print "=" 50)
(print "")

# Test counter
(= total 0)
(= pass 0)

(def test (name result)
  (= total (+ total 1))
  (if result
    (do (= pass (+ pass 1)) (print (+ "‚úì " name)))
    (print (+ "‚úó " name))))

# 1. BASICS
(print "\n1. Basic Operations")
(print "-" 30)
(test "Assignment" (== (do (= x 42) x) 42))
(test "Addition" (== (+ 15 27) 42))
(test "Subtraction" (== (- 50 8) 42))
(test "Multiplication" (== (* 6 7) 42))
(test "Division" (== (/ 84 2) 42))
(test "Power" (== (** 2 10) 1024))
(test "Modulo" (== (% 17 5) 2))

# 2. DATA TYPES
(print "\n2. Data Types")
(print "-" 30)
(test "Integer" (== 42 42))
(test "Float" (== 3.14 3.14))
(test "String" (== "hello" "hello"))
(test "List" (== [1, 2, 3] [1, 2, 3]))
(test "Dict" (== (len {"a": 1}) 1))
(test "Boolean" (and True (not False)))

# 3. STRINGS
(print "\n3. String Operations")
(print "-" 30)
(test "Concatenation" (== (+ "Hello" " World") "Hello World"))
(test "Length" (== (len "test") 4))
(test "Repetition" (== (* "Ha" 3) "HaHaHa"))
(test "Upper" (== ("hello".upper) "HELLO"))
(test "Lower" (== ("WORLD".lower) "world"))
(test "Contains" (in "ell" "Hello"))

# 4. LISTS
(print "\n4. List Operations")
(print "-" 30)
(= lst [10, 20, 30, 40])
(test "Length" (== (len lst) 4))
(test "Index access" (== (get-item lst 0) 10))
(test "Negative index" (== (get-item lst -1) 40))
(test "Contains" (in 30 lst))
(test "Not contains" (not (in 50 lst)))
(append lst 50)
(test "Append" (== (len lst) 5))

# 5. DICTIONARIES
(print "\n5. Dictionary Operations")
(print "-" 30)
(= d {"name": "Alice", "age": 30, "city": "NYC"})
(test "Length" (== (len d) 3))
(test "Get value" (== (get-item d "name") "Alice"))
(test "Contains key" (in "age" d))
(set-item d "country" "USA")
(test "Set value" (== (get-item d "country") "USA"))
(test "Keys exist" (and (in "name" d) (in "city" d)))

# 6. COMPARISONS
(print "\n6. Comparisons")
(print "-" 30)
(test "Less than" (< 5 10))
(test "Greater than" (> 10 5))
(test "Less equal" (<= 5 5))
(test "Greater equal" (>= 10 10))
(test "Equal" (== [1, 2] [1, 2]))
(test "Not equal" (!= "a" "b"))
(test "And" (and True True))
(test "Or" (or False True))
(test "Not" (not False))

# 7. CONTROL FLOW
(print "\n7. Control Flow")
(print "-" 30)
(test "If true" (== (if True "yes" "no") "yes"))
(test "If false" (== (if False "yes" "no") "no"))
(test "Nested if" (== (if True (if True 1 2) 3) 1))

# For loop
(= sum 0)
(for n [1, 2, 3, 4, 5]
  (= sum (+ sum n)))
(test "For loop" (== sum 15))

# While loop
(= count 0)
(while (< count 5)
  (= count (+ count 1)))
(test "While loop" (== count 5))

# 8. FUNCTIONS
(print "\n8. Functions")
(print "-" 30)
(def square (x) (* x x))
(test "Basic function" (== (square 6) 36))

(def add (a b) (+ a b))
(test "Two params" (== (add 17 25) 42))

(def factorial (n)
  (if (<= n 1) 1
    (* n (factorial (- n 1)))))
(test "Recursion" (== (factorial 5) 120))

(= double (lambda (x) (* x 2)))
(test "Lambda" (== (double 21) 42))

# 9. HIGHER-ORDER FUNCTIONS
(print "\n9. Higher-Order Functions")
(print "-" 30)
(test "Map" (== (list (map double [1, 2, 3])) [2, 4, 6]))
(test "Filter" (== (list (filter (lambda (x) (> x 3)) [1, 2, 3, 4, 5])) [4, 5]))
(test "Range" (== (list (range 5)) [0, 1, 2, 3, 4]))

# 10. EXCEPTION HANDLING
(print "\n10. Exception Handling")
(print "-" 30)
(= error_caught False)
(try
  (/ 1 0)
except
  (= error_caught True))
(test "Catch div by zero" error_caught)

(= custom_error False)
(try
  (error "Custom error")
except
  (= custom_error True))
(test "Catch custom error" custom_error)

# 11. CLASSES
(print "\n11. Classes")
(print "-" 30)
(class Counter
  (def __init__ (self start)
    (= self.value start))
  
  (def inc (self)
    (= self.value (+ self.value 1))
    self.value)
  
  (def get (self)
    self.value))

(= c (Counter 10))
(test "Class creation" (== (c.get) 10))
(test "Method call" (== (c.inc) 11))
(test "State persists" (== (c.get) 11))

# 12. BUILT-IN FUNCTIONS
(print "\n12. Built-in Functions")
(print "-" 30)
(test "Sum" (== (sum [10, 20, 30]) 60))
(test "Max" (== (max [5, 2, 8, 1]) 8))
(test "Min" (== (min [5, 2, 8, 1]) 1))
(test "Abs" (== (abs -42) 42))
(test "Len" (== (len "hello") 5))

# RESULTS
(print "\n" "=" 50)
(print "             RESULTS")
(print "=" 50)
(print (+ "Total tests: " (str total)))
(print (+ "Passed:      " (str pass) " ‚úì"))
(print (+ "Failed:      " (str (- total pass)) " ‚úó"))
(= percent (int (* 100 (/ pass total))))
(print (+ "Success:     " (str percent) "%"))
(print "=" 50)

(if (== pass total)
  (print "\n‚úÖ Perfect! All tests passed.")
  (if (>= percent 90)
    (print "\n‚úÖ Excellent! Core features working well.")
    (if (>= percent 80)
      (print "\n‚ö†Ô∏è  Good, but some issues to address.")
      (print "\n‚ùå Significant issues found."))))

# Performance note
(print "\nüìä Quick Performance Check:")
(import time)
(= start (time.time))
(= big_list [])
(for i (range 1000)
  (append big_list (* i i)))
(= elapsed (* (- (time.time) start) 1000))
(print (+ "Created 1000-element list in " (str (int elapsed)) "ms"))

(if (< elapsed 100)
  (print "‚úì Good performance")
  (print "‚ö†Ô∏è  Performance could be improved"))

(print "\n‚ú® Test suite complete!")